<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="31">
  <Files>
    <FearlessRev_Footer.png Encoding="Ascii85">#gye(6pquyX:#-1Mx.9;q.[efk+:kryGvMVcacR)N:jH#;0FRl8tIaj=ne6eJ/mV!d_up^c^6j+nR6}X6B:5:du/;QJ{o^P8XA$Bs/Iv$8hX*xy*-W7f68r$y8W,UIVxx:prO=aNMI-K^WsJ2s,joddpP)8+m#4]6zn}0LCk7yHjW?Ykd1wi+C0sdzb%pPH4Rj+9-pv7oAn^)2-M8M=Y(=_AC4XTMf[k!;j-+uJAU%G[mAI??vF+)3(NBM-.Q/cl$^r!XM[@#Yjz+p].KwUz#mG-xIDh#LC3Hok:WtC7Vn-g@g{UIhR9P#xZo%Z:*{@[F/J7ce@J{upB,#{Ej[FkFQ%6QzKG+jg$JLffXvXwx8NlV@:.l0!Ny/2[3LDH4qQLsC-h,@q2@8:w?(YfVZ#sir-ZRX=6AI!k-zBhMT+2eou8^1([8sLVJdhVW)+QP8mWkw#diBf=OXVD/?Vuf1t,qX?JrW:q!ES}1V.2PLfAsb]Wazjd*ve@Va)L4+e/z;EwPY1.:{;QjB)PKQH:O.jM*C!i)]z.jg7,-jLdPOgmKca1]Jpyapo#6w4Wum10!w]^G%5mvJVT}MG^=(pEgMoH{dc76f35V6k3lP-l]m3z?9Kk3jWVqJziD.,vlHan:1=JH^HiK+s.Ah.69vBJ(O6m+wNk3_HsehY3P3si{cmg*[=y01x+rL!x0UQK2J=q!60z*Fek{uaensn6X3@y#mhI+uf9}@#xgU%f2aK28oeaa1V1gwuaIK#.+L1[]{19sKPh;cQPo)]j=C%?ol,3z$D?wA?DPjWTwD3?hi=)_8qYk;?3I}hp3y@pFyX;4UA8.Vby7:cxU]=GX)j?9hps:_s_Jk?hTR0@I6cc#tgvmdyfx!Y]By2p7d_cuc,N}8BM*p3AQ=Eoqp@JM9t@u9v4}JT]FZhhd=)Owe84%RbUhbW)]im,I;aRZga,[wlUXUaUuFXhgh=W_H/u%{R5.F[9?j)i,*_$u=A{9M7X?loJA.eccQ$7^hGr]w5=wnM7w.aIUA?lD?9)#xre]Di;awU-m.rS%lUadb^}c{YIr{@?I$FhNe@IxdJ4,@UEJVZLw#.[3s53CQj5;t1/mS7_s#rozo+)8p1:w=y@KXXC-i),R/k=i8CK}U]d]adE!FIp:NB37/bI}4@IvY=K.GxcBwxK4$yq=T0Yc6k,n_*.2$ygU22rk]jox=l_X-YRn,ES{oS#Yj,SUg*LrQeFZ#:J(Z3$^mLQ1d(zNJT9^Z/5:is*,#n9gI1U%11@{l7^]zain4B@WEL}/G/Nvy2Z0ClY^+H=S$j.=).:hmfhtQ*34nO.lMR.deC:W4[RNkjX.QHzF.%5aVd_b;N?YjZ]E6%cXyQnNO;]GY7vC@Jnq7D#-2Xlu/7.H4j@K?q@JS8;bd?OwuK@G,i)ob^h2w6eWc%Xo:+u)r%4@G9}v.os8K(;JnKr4s8D$-677e84:S{O0$g^*(L,}GTE@zR)===@DqPGQFSLyNI)?36K(R(];P]Yc8aMQ!RCG:W0v$-cK()W[Wz]_#@96wMa[q]MQ#G}!KxS:A:%c,T]Gd*5*1!U)s^V3A4ro0v[V}41.*k!6S{WLtwk-:c!$ExLVs3*8z.rV{M7{cR[kNm%$O%kw/L}]0,SJhZ,[j$;KT5SMZPU}9S:akOsF$VEwmeQLhu=V70iPKG9,4B338^vLlh.9H[_vbswcgk$r)4)CgV*9G2yIu*t#i@f(,)heF+P8%n)WkdDZj3(N.4J:zh[OM/!O1kSX*],6TAV6PrUHA?ZYa6H0o#o11O7MwnzgY^_0lb2MshAU1QDs1eZlU3ZcTuo^tj3)UQ@,O?h(]6BhQ$C3/J6]BdAHhQ:M3j^0VqSxRgM?1z,FbjKYVFr=g4?=D^2l-2K2[34?35i1dl3IZz0y{kl8mdiQFJ-,]79fz4]ee3oWkJAs3#,!v)ne(x?.{*86cJ!kZGBr3NH%#)0HEr7ehUU^9QE[.[m^Dv]/LE1l%a}@#eF?w::ZMWZ1HU;(S34eII0:jPLAK*$zVQ.1Xlsh^o@nn3^YQDd4kM]i4:AV6uGR3!d^nDOFwsTM!xfDt?xvkb6_X@z;V7%g1Lhd#lFJ^.tvL2IN=Iu)fYQO)Q=vo@hbLt122]eACe2r2wD4uYuqYVoZHwU!UsQLZGpL#BXbrnv,{=LSLPAoeWz;)p:+dH^*i88CctEx4zhvc1UCYriAIvmdkP^fO=ZMa6Yy=x3Q}/Q}wV;rI:=$#U7fS/OsCWBT-VlTRjr{trYD%gASgA,F6tU}yOcEYOJ5k}$ad(QeIFT7e(wzs,4WcEt;=K;8t-k;Sx!n3.],jkikL/rc*VU[@G%XQtVT_/-]=;,Tve.5UY=64GknHFe!qlP0Rzi^=%FoU-#6E$J$r*6*kSR@J?]o86(6Zy?5=O#3YaH_7+d#E+FkVjdV8fP+0WC,j$52g-cn)guVrLkTl__c-)=8NmU)^z0x4{v{DG*Aqpeg9^m:4G*svkK#$h3H;eb$34QCb@NJNEvYKRVVK)8qmT^Awfm#ZWGhyB)JXkz_fKDHN$NHCNvIG$;w:SHdF;g8;bb1{0v/*-1]QWq8M205z_IUHduZ8CuIEea^B$M3M05ApFN@xC#,jSP/7}Cu#D:c%u9SZtEC;cb]C*snQ{f2}y-s:f5k,J8gTVZc*ST,IPw6ah06ZT-Ve$h)wDo7:_vX(g!wzkTZhdKu[6E#ChSGey.+Y^0*:zUwbwM]:SZ7eafe/iY}wdiJ@[9OBhmZjj$F:o8V!SO/8.sGgvkQaLWxl;5i5-fhTnKN5p4%4a_1V2Q9P72^@k3SpQ_E-17(K7FwB#Tsh5$P}9$f2m#M$T#(+3v:((Mf_iOToznKAh0=/hQqT:Z0-ie;#MN_?y%,atg:dM($^-mj[@Z8}0#_NYD^}x3t5Sx*m-!y?G!m}ik,d6H$twDH-zhtuf[h1KUp].:]588$b(^K7UF:^keaYG%_C^2;%W!5$i{DlknSUhlIhxDH%#WJvt=n_)vG[sD3Kc.Ef%2?=U!BW#SO(7Fcmyy;@CK:jH6Wnu6As/OxDRojno}?Qh$O1*x1hItQp!CZ/o)I0U}5njAOBa,u}.@U0UHEhuzr0.M1_aU[-0Gf.z3/-j?h4QQ!i5wv],CzDm)Rp7)7@zrS[qyJ6b,Xto,@:l/$8tSl4b(4.5j;^-s3fKp80,w-KI5$btv/(VZ-bVa31*i;oAu8=arik60x9Tc+c@HaJ[vgUuVt9M0#2Q+qi^W^$d0bj^dtN(s$)awDG8y9H2dTQ:T57Xz)KsR[/[(A=aIE^q4h:?VmThq!D^*4UmuoHKE1x[!LQdWx2(IqV.3g??kK0PNy)bW{u1RqY[_Cti?XW*3%TMvu6l]+$2KI^MiF]bm^aV2FVP#0Y4)z9JgkI{Q7Z=n28vN3?#EjGBM=Tx02w4dZG:_6A1H@=m6gnI:*cuIz381}r8*(o?)+nvPV6rhLV!u:.uRi5hF=uQGX5ygfCP%@RPQrzkrr]KE?JMp$uG!:)XRPSU.PkBZ-{W-Re.o?wk=]_Vh8h+KZ:!LhF4v=EhR*}]#{2w$^8V)J#hd16];9;wGeLvDl5u$hV{I?jez1$30Ra^hIz^#5=[Q*Gj)E,Wsgz}ioU#-;[-xg;np$/rf_W;h%(RV?;JQqkQn7OAM,GYEjW1xWoE8mV4{6JV$bilZu5[IBB%06W^o721k0mNh0.?(FB}l09)x(d}dv5CcNBXYgG!4Ca::KcByO.JZCISLdppd)d4SkMD6$nNS6eAbB(Xlip6;w*L3-Iuo-vg{h)%_J^8zp7ZW95M4Fdg:xw1lJd8pBJ7Yv]hh:us)kq$HieyPuzB:zrETtaTK%o(wX$X=aWjIATl]F,^rt1zdaPl=Ku7iwVuGru)LN+WMy2]tJR(1(!KAdp/mfL5^EE!CKYomR-#A:P:eX;,3RuJ,1WzhZqXunOi9o^XQtrJh^+[cY2[slAg:,q0e1bufEoHS^Uz-[SQYOh!WzCNEwx:$3@=x@/#wkY]Ot=+v_6zd/!]rbc-EE-EmJJNq]0oBGUlTv#XE_pD:}6Ga^zx)]=$P^4%WrI-t?WM2UbA$)gtfBzPK]m+:g$#g[yjqdYVys.DJe!EA:{PL.#z6PQjh9KJLE}?+=5!7V@q4MMxjRpb+IwNT7@5EfZRn7L7*=)U9]QqpS[?W,**P}!*$!U5B9,S!rna=K)LY2GV%pAHqQ=p[Tu6720[WTUq?*;x/!rWJKa7BSjt7FT(O_zvl1k_pO8z9UeVe0A.1XS1*^QVOy0zqLw+U(LfSTrQ^wc51zlphe4k-%oBSfQF0ciTSC4X*$KaPL7,rS_S(:y=)NZ)gLEulIRSn-anO1@7@WG3S5p]k-u?;j*V(SQRE$q)SB/$bT#Wh%B[S+rVc{ZLoKy+mRzo#v,cN:Hp8B-(8N-3h3%sD(jkwLzJF3su9$k{u1=6G*m?4;3(BQys/d:3UK6XVIjoN{kY4;Y1bWkkXX5lzI/3H,eii)9b,TS-_46Wl8BtOl(Ae^fg1k,?Fs=tp}BLHwxe?go4@SJAS%eLHR8xgrFd*BaLtR_)7@x,%K(j81XcGl;kbA7NhOzzNe{lIfK$[!M4-+GZa:ycb4i!a3c?9VceMSd+@Yd24z{A$0ewIBsQ4L(!Vw0aSQ/.W,(6,nH)mz*4Mw6-RxJX?7M6T9=yA],cn9kINlOj}C+FvU[bWPU.h4]i;gdrDe92iRSFC]..Ump5wchn+B,%+Cg3V:faMRUbt/.Z49^6:68TQAcMROJy!kJjFfH0ASZ32]Xr2,=2+e^n*%$Mx7sx5O:ju%7a+2D;*#00$WFt$(-tlkoZ.?n6^*=mplA5Kc8o%h)?)4yX[{^kK8S^#9Ky]{A[e-$Qc{#AKW.RHq-(gLn[x[g7pMb%=9S.:6Y8.Vq^wLJGExP8u_/*:u/kyH[vpS/F49o:PFmGSBA;Bn6(Mb$=DTQuJzi?I=m+U1wbSKvCE35!B4_?H.r$@ppEgA[ho2BI[p2u^Uq/Q-$%8GRcJAGENS(+G=9;[.DV+}^[[s_lp3B$Ypv}$z=Be)OUK,TWZ2E^E%K^!MCt:#P;6qXQuUe-yGIP:^j!UbT._^[UQQycbr%CoHO7mS6G5]7tCz{i@s{@qXg=TC8Equa6-vdqUbKC^7PLA6zdAi:yDs-qxTW}-lnT1h$1:iDKy/b}w$*]y}tQ[$D@z!kLKA;@oXu@V5U$FQ*;o)o.l(?FQRwLX(5]6Y0mUEw9Jr-Ow/g;F^#i01}$SQHwe_-NILpl8USnu(Ow}F=qb]8)LgI-NYQQG6/oihvkCOujqlTNz=wTDCHa}#uCuHZ-!E{N]tF,VM%e[i,0noCJpLs;MZMYI)Li[z-rG;}R,5]CI%X!6_*xLXdFD3HR%VPSH?qRjxai{]U%HdzX0@IR*qxgK00:d8SE#k6hu[PsMi)@?4aN0Rimub-kOvY4@Qq{h!.R]..E)s%)*0Hv4SSqzcE9o34i/FKJcif1FsL!tH=.1R[qAlHvi2RC)!3W#G$xV:dJ,yR}z;O,)Cbx}T$RwRD_+XN;8Qg-{NQ*z*oK0^+SuG];R+EhEvE6m;BveYu3foh4(wZR*d:u=1$)J7U$Z1j#JmGH8w$zlMQK?qE}RB(3yQ#6;)?.YmFr{T3Go@A19J1-ke5X,StZ@T!tN(MJqr=$Q5I[4)e(C!p8u)lD*sNKP=cg;w1P:_x[!_,)onZYu}=$.)p].eNDj[A,}X7){258Io!ViY[z4X1lkoE9E$@9}xyZGt2Z$5YwSRk6AW;5VfwSk,ay-9ixWb5[Q$#Kl9AD}bn6z3ZOhUwK,ZKU56#03BJ3*1}XlY!p^WhPN.hhD}qU#Qa$o),Ni4WGTQ]=tYaq=e.5:nEetm1s1QK93^C@K@NikKGS*FqN213=:qq4A.!SqgI?+XEt;;uChz9jB%jrF9_aXeCua9kzJ}y=I:uU_4Y:JtsPJ:MZWf#)p0EJb[tbbNDRJArT*{x2H=y.=PKdgC$]t!pD,svew%v/_lq-jHrUzA[I]_DyS:A=u[2Jl6Y]/z$xu8ViA/H9XH6v+P*$Yg[f}2Gxz_+=biT7olR{WH7[g9vVNHH[c49Fnv]QRAjHoC-K7[G-+TV[x]C8aW*f0ofr%qI1h=7m}]hFk=tc)hEeG@yr?]/w[*j9qs!,{5[m+Cva84YD,#eCug%l]-eflE*vM7c,8FK7f!^Y0cxX[%qF:Jl_sDm_AAU2e]-(dM-HZ^Vac?pSJ(Vte#H5/cM?+i48^fsCt^0C)TPUWk!:ALb[UFX.#6xrF}sHVrC^n8dJHEoZmnE.u#B_l]=ke[-UM}lA:e)A24T@(80)364*w5KX-*E%9C9N@RxH*G437rg{Pt#3d)mjR%Kt:G(?ysOmg-5Mxs.#%eTD4PDj$(b=@70-4_(ZgXe022hu-b+L+3KeeLc:O^WWaQ(A(,X[6y)E-gJXm;J.#Y)OwJz7UQGm**%[Z_p;CQeq5oUwrzD9@XVoe[BGBL_pVZndZ%3LKY)_-xWG3-6aMHep{f$Y=W1tsni/*^{Q{#t5c1$+)edO=deP8A*K=x)_QA,?CoH$N[#b=RpL%r/h7=*Qa!!iN[2J]3oOnEcCc{rOxkti.*T1(rly$d!+NgSM1vlYQXli5YRMczI5g8G)xJj$%/fcET-,N*DnI8?;dq_RMDh-=gToa:0fU{DQKqL]hkvMzDB@c^;}N/DX2V83+)oIb7@/Gr^6TE}tU%z^RPl)^h6zc0(le9V,smp0yQ#nr/Ef-S$(CniLW32pev;{Qq^.XBl$dVSmp/fa,c;mjQqB#6,7YFtSI#mjcsHkT?]!]$-#pnc:7xys1BO2DKxE@CE})$%RH;WuI}osQ54bn#(A3SEoCH5TOK8/;cj.rHfpkr.!-byf,kK}Iys+k+vi:9Lh^5t,nX@loFzv1mHe-)k!,xdJRUC2F6p9g,*Jc!-SD[}e2)za-,UsjL1o=_+4B%o:9}#R=4_.Uu)t})VLXgQCad1l:Bvh?A$a$=wh]Yq?ddnQ*Rct2VKIKE(L8A^xM6Prqy/Fr=yOetg84Jz++_-MXUcP#vLd^XK)yx[ZSvkccL7wGeN]+hn)YsA(PBZF8T@kO{B?gZi=,2Uc!9kthi%uvphNhOzP3QUhs*qv0DDPIYA^w{4u;4,_]h8)tf#-d)^Wx;tV7mYNmj1T#,g?#*pwEiSxC9qbs7qXlNh_a;s@a$6Qpzr!(fkwKgVfBEJRV-OZ$+IRDIMvSqp:tJX.B;MW?UBzluH@hN${(ng[@,237+5A7Ebcis#xD^M]6-+[OGiT)RO6b?Ya?:M-r;ze9Cu+;)SD[:1tM_b6v+k8yP4]W@JzFq.W_Z^K.CD%)y(w+^bwU^rMMG:M.VNvXdLRR=vFG71SXf$@4+uP+6}sL_WS?R;,wVk]-@;UXb4{1d$]ytX(N?LF+_dJ[Ga6!dgetTut:n60Yv2jh0?hrKTGh2{UUWfO1^/#,#B?d!8kai!b4YrH3WA,Jj^e-+A(m+(bNY(9VX0%h9u5(%hd=z:fCoL5rU!ndHVrMRCv;[I{%l0!krz59JCmVz9=n1+%%oBXB-@gTUb0=Vb8KOYQcd,cdpz8H=.6O7TYLJ:$W0ORZb_zpB,/T7qzb^NaK9gA$%uumrufjkEg7]4u4#wGH9)7F%I#UJbFRIS1FHk$_!7A4^1VzU-(@!(TxpY_6RBVFVM/.FE{qO0S_XMz#l+S=n$pcRPN3^S$q@0xH5Rc7}WXJ(XPwns0j@I)_e=UVmv?$A[BJCi/WSI8JP)53F^c71#=sV;^J0Y%gFzG-Z.88t)-WSEjjq6)setu8@s?^WIOp?2*kEi8vhM;@=4:bNNDUHvhYth8U?!oM!f7va35T?:Kw%Sj=3sRjDc61u5:VRgL2eM;YK4w,V,*CHMt}73SEAHoVhLALcT8ym;dHfunSdn3K4#-Dfvfr?A?u1(3h5?OHGKdXt./N}0@Pjiz{DU0HduS3HtiynOeY2JJf,oqfe1%uVSIrrO5Urc#oOu$ILan)BsPQJ;jjR5T8dPSY:W4{2Ys.brV+rMO(j4AsZR!wBV+zX:Q6Pq;z$JgK]3K@)_._ER[k7wB/[8X?ITe,W?f@J2HO4IkJL1_QLmXG?P4/aWz)%Kw#x9DHEtetoLk6.J0Dw4/onN.P2]l]bB[#Nc1VB*v)q9IWKPF@mYspQ1aQ;:KVn[#0fb;eQ:bZ%0JdWPNi7Fw_M#xP@9Lq^#^?s/*TxGX0Q{LasDMT!l?{]6A+.?4uC/.nF?0mHbU/TpxtQ^Dr*EzMx@=?.;nB%,v7OsM@x0Dl=H#ikCMXoNxWT4z0Oo[55*W#L-ce5Sd,dA$/WMzeuBW0^s9=Ak@cp*Aa+o@vd,Pf_dT[lYK}Hmk}+hB}0f=[HcNb)go!8#8Yo.(_TP0[+,-o/dBTSs=2vgv=@_0.UvsO-Kc{bJ!:ehocEsE]_0JoeS%pUZ{]Di^s(*7zToFNnwh,+)xF3oY#eMi[$4bK,r79i:v,^*07y.7qXUUQOE._6)3,gW(WFhMS1PIxCkoe[cX}KUENp5WN@?$iS%}QSR5x$damvTH9D[k]*g]{06v$2DHSMlMAFGtPTi:1W=}pw2#4ReA:K($!q;+,!Hg:_*:38_R+y}?woJ7*UafUa74jPZE3LcDZSTxjRnULnA2cbx!v(m;{mr,sQLNG4R1vxdiR5YzcB(9/}t(%k1aTxLiJUyM1%5z_lsk+LP5QJGh9/.zXT_)dcJ*8l5M01)trvnLHhe5-vV4Nqd+^?.@mOBV*n/DrVki3ALP84cmmG-^Z+Y.yuLB?bfqF-]Nz$@E7+[HC+.tbJ6KI}}e(8F]/;reUvLrj$lyCXl{#hY_F1;f=frB$uXw^G_p=Th_%VtA9@SJFx^JAzToE-,hAWA)iI3^GNKf2f,dLpK)Wq@!(e.bv3,cMiEEV$J23tbD$)FsgXsA,1oM,c}=wx!ewFR@ZL+ff0PtbdU?%N$_i_[pdh*DZMbts(pkbE26=DvVn/rci%{A;Qd#ZiQ;o[I@*vL;.[}gt@RZPqPDT%Djv:,LU^/!w6q$Ff!.5.AOQvxcMhhn;xMto0z%Yv-N.b(KNrPOM-!.d$uARS3r%-*-WkfT6I#rn]fAOFV+sdg#T3iE]?ei(;3;!4$HXVSfrclaK@1!@6M+42Y!b26fY,;_MxAXHG!?x!x3377k/2u%$vfdgv5!@!xyE%y^ZW/vHf_9F^f^%AOZ07-RvyX{==wO8CXRPigT%tb2x}5XTPsib075z#*1SZ3OSRA;ufBeL/$ie-kOWv*Q_Z3We3XdY+hHR%dG{N1vkN**l.s##X2{fcS6HxRnLo31YFTEyqfKdspeiJ(ZKv7yjoOk?*$$Gvp)rtyo4$qO/)jd=P2!*4GCnDQYlCx%LH)Nxlb=X2Y]x#Dj,V}i?0I[m9jtI/5h}!*07UOdi/Sl*ES^^=[W*pHaOLY7d1K,NlIR8n*$qCS:9,udjr^t;wMAjMGLjcTa};8CMXjF)r;B.Vl{2SoOGcZ:J!zG.2,x$6L?*r}ur^A*Td5vrBXkk-M::(p54ZV@t2:TZER51X7DOLXYcW$:(k*zCPY(m}La1.nAd]j$5vz{tWjh.4uEJeb*LD:x$;HFt?/CqHrGXnHn9b(iV(,,%EdtJ,.YIaUc,rezdt?SEvs^G9/%m:/XiBN?KMu+4KyjBQ,9mjE*pF]REsUwHX4OK1RLF(0?sh0@M,M+GQK{]szZ%o#NP;TK#N2IaceTC5IDiQB+JDU9VkICz=[{/d+/iub[OulGY?;*+@{){h#?gwQNULUhfsB@$:lRIYOt!=Exruu153tPqH$vJY0:z.OUl$%OkCxhMIzQ(i4:$2EG*})ZC8p)fASYfXxni+0@*rohG7x!RS:_DMlGi(:9/2b,PJm}fNOUyIcG?Y2ai(MK_4;uWR/2gGj^YA</FearlessRev_Footer.png>
  </Files>
  <CheatEntries>
    <CheatEntry>
      <ID>13831</ID>
      <Description>"(Enabling the scripts can take 5-15s ~ it also removes the anti-debug process...)"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>13921</ID>
      <Description>"(Enable scripts... AFTER loading your game save !)"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>11854</ID>
      <Description>"AC 6 Syndicate ~ v1.51 (Uplay &amp; Steam)"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>000080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ACU.exe
  Version: 
  Date   : 2020-05-15
  Author : Paul44

  Initializes ptr variables for main scripts...!
}

[ENABLE]
{$lua}




{$asm}
// needed in: kill anti-debug thread procedure...
// see main script...
// aobscanmodule(GameProcess,$process,4D 5A 90 00 03)
// registersymbol(GameProcess)
//aobscanmodule(GameProtect,$process,E9 58 E1 82 05)
//registersymbol(GameProtect)


// needed for 'Enable cheats...' script
globalalloc(pCameraMgr,8,$process)

globalalloc(pEntity,8,$process)
globalalloc(pBhvAssassin,8,$process)
globalalloc(pHealth,8,$process)
globalalloc(pInventory,8,$process)
globalalloc(pInventCheck,8,$process)
globalalloc(pUIMinimapMgr,8,$process)

// kill antiDebug...
globalalloc(pGameProtect1,8,$process)
globalalloc(pGameProtect2,8,$process)
// ensures script is run only once...
globalalloc(bKillAntiDebug,1,$process)

// check used in Map Waypoint..., Teleport to Waypoint... &amp; Build Icon List...
// probably will not work on certain PC configs (RAM dependency?)...
// need to collect correct ptrs then: updated in main script ~ to follow up...!
globalalloc(pUIMapCheck1,8,$process)

pUIMapCheck1:
dq 0x0
//dq 0x142B3C400

pInventCheck:
dq 0x0
//dq 0x142B6A180

// some stuff...
globalalloc(pLevelUp,8,$process)
globalalloc(pFloat,4,$process)


[DISABLE]


unregistersymbol(GameProtect)

{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+22F2CB0

"ACS.exe"+22F2C9F: E8 BC 2B 00 00                 -  call ACS.exe+22F5860
"ACS.exe"+22F2CA4: 48 83 C4 58                    -  add rsp,58
"ACS.exe"+22F2CA8: C3                             -  ret
"ACS.exe"+22F2CA9: CC                             -  int 3
"ACS.exe"+22F2CAA: CC                             -  int 3
"ACS.exe"+22F2CAB: CC                             -  int 3
"ACS.exe"+22F2CAC: CC                             -  int 3
"ACS.exe"+22F2CAD: CC                             -  int 3
"ACS.exe"+22F2CAE: CC                             -  int 3
"ACS.exe"+22F2CAF: CC                             -  int 3
// ---------- INJECTING HERE ----------
"ACS.exe"+22F2CB0: E9 58 E1 82 05                 -  jmp ACS.exe+7B20E0D
// ---------- DONE INJECTING  ----------
"ACS.exe"+22F2CB5: FF 35 CE DE 3A 05              -  push [ACS.exe+76A0B89]
"ACS.exe"+22F2CBB: 66 0F BE EA                    -  movsx bp,dl
"ACS.exe"+22F2CBF: 0F 91 C7                       -  setno bh
"ACS.exe"+22F2CC2: 4C 8D AE DE EB 33 FF           -  lea r13,[rsi-00CC1422]
"ACS.exe"+22F2CC9: 48 B8 00 00 00 00 00 00 00 00  -  mov rax,0000000000000000
"ACS.exe"+22F2CD3: 48 8D 34 95 39 C5 90 AB        -  lea rsi,[rdx*4-546F3AC7]
"ACS.exe"+22F2CDB: 49 89 C5                       -  mov r13,rax
"ACS.exe"+22F2CDE: 0F 91 C3                       -  setno bl
"ACS.exe"+22F2CE1: 48 87 F5                       -  xchg rbp,rsi
"ACS.exe"+22F2CE4: 41 0F CC                       -  bswap r12d
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>943</ID>
          <Description>"(FastTravel &amp; Cutscenes cause values to 'reload'... !)"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>FF0080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>68</ID>
          <Description>"(it can take a few seconds to collect the values...)"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>FF0000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>13867</ID>
          <Description>"Enable Cheats..."</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ACU.exe
  Version: 
  Date   : 2020-05-24
  Author : Paul44

  Collects ptrs main script...
}

[ENABLE]
{$lua}

  local bKillAntiDebug = readBytes(getAddress("bKillAntiDebug"),1)
  local offsCheck = 0xB0
  if bKillAntiDebug == 0 then

     GetLuaEngine().MenuItem5.doClick()
     -- need for loop to get info print-ed...
     print('\n One moment, please... processing...')
     for i=0,2 do print('\n') end

     -- ACS v1.5.1
     -- Standard Edition...
     getStaticAddr("E9 1F 81 3F 05",0,"pGameProtect1",1)
     -- Gold Edition...
     getStaticAddr("E9 58 E1 82 05",0,"pGameProtect2",1)

     local addrGameProtect = getAddress("[pGameProtect1]")
     if (addrGameProtect == 0) then
        addrGameProtect = getAddress("[pGameProtect2]")
        offsCheck = 0xA8
     end
     unregisterSymbol('GameProtect')
     registerSymbol('GameProtect',addrGameProtect)
  end

  -- checks used in Map Waypoint..., Teleport to Waypoint... &amp; Build Icon List...
  -- (see also "opening" script)
  -- gets ptr for 'Build Icon List...'...
  getStaticAddr("8B 42 44 8B 4A 48",-9,"pUIMinimapMgr",2)
  -- assume at least one iocn record with correct VFT ref within 1st 10...
  local addrUIicon = readPointer(getAddress("[pUIMinimapMgr]")+0x60)
  for i=0,10
    do
      local addrVFT = readPointer(readPointer(addrUIicon+8*i))
      local sCheck = readString(addrVFT+offsCheck,5)
      if (sCheck == "Alpha") then
          writeQword(getAddress("pUIMapCheck1"),addrVFT)
          break
      end
      --print(i,' - ',string.format('%X',addrVFT))
  end

  -- antiDebug routine...
  -- kill anti-debug thread...
  -- see [Show Cheat Table Lua Script] for details...
  --print('[',bKillAntiDebug,']')
  --if (bKillAntiDebug ~= 99) then KillAntiDebug() end


{$asm}
// antiDebug routine...
// kill anti-debug thread...
// see [Show Cheat Table Lua Script] for details...
LuaCall(KillAntiDebug())

// struct: VFT +30 .. +18
// collect ptrs: occasianally Health values misses...
// CameraManager... gets to ACUPlayerCameraComponent...  gets to Entity... gets to BhvAssassin...
//  +48 .. +0:ACUPlayerCameraComponent ..+18: Entity Player !
//                                            +70: World .. +1F8 .. +0: BhvAssassin
//                                                                      +C8 .. +60 .. +90: CSrvPlayerHealth
// aobscanmodule(INJECT,ACU.exe,44 0F 29 AC 24 C0 02 00 00 48)
aobscanmodule(CameraMgr,$process,4C 8D 4C 24 70 4C 8D 85 10)
registersymbol(CameraMgr)
alloc(newmem,$100,$process)


globalalloc(bGodmode,1,$process)
globalalloc(bInvisible,1,$process)

bGodmode:
db 0

bInvisible:
db 0

// Error stats...
globalalloc(nCrash1,4,$process)
globalalloc(nCrash2,4,$process)
globalalloc(nCrash3,4,$process)
globalalloc(nCrash4,4,$process)

nCrash1:
db (int)0

nCrash2:
db (int)0

nCrash3:
db (int)0

nCrash3:
db (int)0

// 'Player Coordinates' script
// x64 pointers are 8-bytes long
globalalloc(pStructCrdBase,8,$process)
globalalloc(pStructCrdOffset,8,$process)

// gathers offsets for resp. inventory items (div by 8 ?)
globalalloc(tInventory,200,$process)

// Time of day...
globalalloc(pTimeOfDay,8,$process)

// Accomplishments...
globalalloc(pAccomplishm,8,$process)
globalalloc(pAccomplVFT,8,$process)



label(code)
label(code2)
label(code3)
label(return)

newmem:
{$try}
  push rax
  push rbx
  push rcx
  mov rax,CameraMgr
  sub rax,0x4
  xor rbx,rbx
  mov ebx,[eax]
  add rax,ebx
  add rax,0x4
  mov rax,[rax]
  mov [pCameraMgr],rax
  // Entity...
  mov rbx,[rax+0x48]
  mov rbx,[rbx+0x0]
  mov rbx,[rbx+0x018]
  mov [pEntity],rbx
  // BhvAssassin...
  mov rbx,[rbx+0x70]
  mov rbx,[rbx+0x1F8]
  mov rbx,[rbx+0x0]
  mov [pBhvAssassin],rbx
  test rbx,rbx
  je short @f
  // dis-enable invisibility...
  mov al,[bInvisible]
  mov byte ptr [rbx+D8],al
  // Health...
  // JackTheRipper sits +98
  // +90: CSrvBehaviorInteraction...
  mov rbx,[rbx+0xC8]
  mov rax,[rbx+0x60]
  mov rbx,[rax+0x90]
  cmp word ptr [rbx+0x12],0x02
  jg short @f
  mov rbx,[rax+0x98]
@@:
  mov [pHealth],rbx
  test rbx,rbx
  je code3
  // dis-enable godmode + maxing health...
  mov al,[bGodmode]
  mov byte ptr [rbx+DE],al
  //mov byte ptr [rbx+206],al
  cmp al,1
  jne code3
  // resetting FallDamage...
  mov rcx,[rbx+C0]
  mov rax,0x0
code2:
  mov rbx,[rcx+rax]
  mov [rbx+10],0
  add rax,0x8
  cmp al,0x18
  jle code2
code3:
  // Inventory...
  mov rbx,[pBhvAssassin]
  mov rbx,[rbx+0xC8]
  mov rbx,[rbx+0xA8]
  mov rbx,[rbx+0x00]
  //mov rbx,[rbx+0x28]
  mov [pInventory],rbx
  // check needed for 'replay missions' not crashing...
  mov rbx,[rbx]
  mov rax,[pInventCheck]
  test rax, rax
  jne short @f
  mov [pInventCheck],rbx
@@:
  pop rcx
  pop rbx
  pop rax
  jmp code
{$except}
  inc [nCrash1]
code:
  lea r9,[rsp+70]
  jmp return

CameraMgr:
  jmp newmem
return:


[DISABLE]

CameraMgr:
  db 4C 8D 4C 24 70

unregistersymbol(CameraMgr)
dealloc(newmem)

// antiDebug routine...
unregisterSymbol('GameProtect')

{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+1A66A3E

"ACS.exe"+1A669FF: E8 6C E5 00 00                 -  call ACS.exe+1A74F70
"ACS.exe"+1A66A04: 4C 8B 0D 6D BF 8B 05           -  mov r9,[ACS.exe+7322978]
"ACS.exe"+1A66A0B: 48 8D 85 20 03 00 00           -  lea rax,[rbp+00000320]
"ACS.exe"+1A66A12: 4C 8D 45 90                    -  lea r8,[rbp-70]
"ACS.exe"+1A66A16: 41 8D 57 15                    -  lea edx,[r15+15]
"ACS.exe"+1A66A1A: 48 8D 8D 10 03 00 00           -  lea rcx,[rbp+00000310]
"ACS.exe"+1A66A21: 48 89 85 10 03 00 00           -  mov [rbp+00000310],rax
"ACS.exe"+1A66A28: C7 85 18 03 00 00 20 80 00 00  -  mov [rbp+00000318],00008020
"ACS.exe"+1A66A32: E8 39 E5 00 00                 -  call ACS.exe+1A74F70
"ACS.exe"+1A66A37: 48 8B 0D 8A DC 6E 05           -  mov rcx,[ACS.exe+71546C8]
// ---------- INJECTING HERE ----------
"ACS.exe"+1A66A3E: 4C 8D 4C 24 70                 -  lea r9,[rsp+70]
// ---------- DONE INJECTING  ----------
"ACS.exe"+1A66A43: 4C 8D 85 10 03 00 00           -  lea r8,[rbp+00000310]
"ACS.exe"+1A66A4A: 48 8D 95 00 01 00 00           -  lea rdx,[rbp+00000100]
"ACS.exe"+1A66A51: 4C 89 7C 24 70                 -  mov [rsp+70],r15
"ACS.exe"+1A66A56: E8 E5 E0 EF FF                 -  call ACS.exe+1964B40
"ACS.exe"+1A66A5B: 48 8B 8D 00 01 00 00           -  mov rcx,[rbp+00000100]
"ACS.exe"+1A66A62: 48 8B 01                       -  mov rax,[rcx]
"ACS.exe"+1A66A65: 49 89 86 C0 09 00 00           -  mov [r14+000009C0],rax
"ACS.exe"+1A66A6C: 48 8B 51 08                    -  mov rdx,[rcx+08]
"ACS.exe"+1A66A70: F0 FF 42 0C                    - lock  inc [rdx+0C]
"ACS.exe"+1A66A74: 49 87 96 C8 09 00 00           -  xchg [r14+000009C8],rdx
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>14268</ID>
              <Description>"Player Status..."</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : ACS.exe
  Version: 
  Date   : 2020-06-11
  Author : Paul44

  Collects base struct Health...
}

[ENABLE]

[DISABLE]

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>11718</ID>
                  <Description>"Health"</Description>
                  <LastState Value="3000" RealAddress="181D7CB60"/>
                  <VariableType>2 Bytes</VariableType>
                  <Address>[pHealth]+E0</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>11771</ID>
                  <Description>"Maximum Health"</Description>
                  <LastState Value="3000" RealAddress="181D7CB64"/>
                  <Color>808080</Color>
                  <VariableType>2 Bytes</VariableType>
                  <Address>[pHealth]+E4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>14014</ID>
                  <Description>"Health 2"</Description>
                  <LastState Value="3000" RealAddress="181D7CC7C"/>
                  <Color>808080</Color>
                  <VariableType>2 Bytes</VariableType>
                  <Address>[pHealth]+1FC</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>14015</ID>
                  <Description>"Maximum Health 2"</Description>
                  <LastState Value="3000" RealAddress="181D7CC80"/>
                  <Color>808080</Color>
                  <VariableType>2 Bytes</VariableType>
                  <Address>[pHealth]+200</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>106</ID>
                  <Description>"Godmode"</Description>
                  <Options moHideChildren="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : ACS.exe
  Version: 
  Date   : 2018-04-30
  Author : Paul44

  Dis/enable Godmode
}

[ENABLE]
// +204: (default = CC) ~ 1 = desync...
{$lua}
    -- FallDamage values: 25 - 50 - 75 - 100
    local addrHealth = getAddress("[pHealth]")
    local addrFallDamage = readPointer(addrHealth+0xC0)
    --print(string.format('%X',addrFallDamage))
    -- setting FallDamage values = 0
    for i=0,3 do
        local addrFallSet = readPointer(addrFallDamage+0x8*i)
        writeInteger(addrFallSet+0x10,0)
    end
    -- enable godmode flag
    writeBytes(addrHealth+0xDE,1)
    --writeBytes(addrHealth+0x206,1)
    -- despite "Godmode" Health gets reset to '0'...
    writeBytes(addrHealth+0xE0,wordToByteTable(readSmallInteger(addrHealth+0xE4)))
    --writeBytes(addrHealth+0x1FC,wordToByteTable(readSmallInteger(addrHealth+0x200)))

{$asm}

bGodmode:
db 1

[DISABLE]
{$lua}
    local aFallDamage = {25,50,75,100}
    local addrHealth = getAddress("[pHealth]")
    local addrFallDamage = readPointer(addrHealth+0xC0)
    -- restoring FallDamage values
    for i=0,3 do
        local addrFallSet = readPointer(addrFallDamage+0x8*i)
        writeInteger(addrFallSet+0x10,aFallDamage[i+1])
    end
    writeBytes(addrHealth+0xDE,0)
    writeBytes(addrHealth+0xE0,wordToByteTable(readSmallInteger(addrHealth+0xE4)))
    --writeBytes(addrHealth+0x1FC,wordToByteTable(readSmallInteger(addrHealth+0x200)))

{$asm}

bGodmode:
db 0

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys>
                        <Key>17</Key>
                        <Key>71</Key>
                      </Keys>
                      <ID>0</ID>
                      <ActivateSound TTS="EN">Activated</ActivateSound>
                      <DeactivateSound TTS="EN">Deactivated</DeactivateSound>
                    </Hotkey>
                  </Hotkeys>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>11744</ID>
                      <Description>"Godmode (= 1)"</Description>
                      <LastState Value="0" RealAddress="181D7CB5E"/>
                      <Color>808080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>[pHealth]+DE</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>297</ID>
                  <Description>"Invisible"</Description>
                  <Options moHideChildren="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : ACU.exe
  Version:
  Date   : 2018-04-30
  Author : Paul44

  Dis/enable Invisibility
}

[ENABLE]

{$lua}
    local addrInvisib = getAddress("[pBhvAssassin]")
    writeBytes(addrInvisib+0xD8,1)

{$asm}

bInvisible:
db 1

[DISABLE]
{$lua}
    local addrInvisib = getAddress("[pBhvAssassin]")
    writeBytes(addrInvisib+0xD8,0)

{$asm}

bInvisible:
db 0

</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1523</ID>
                      <Description>"Invisible (= 1)"</Description>
                      <LastState Value="0" RealAddress="181D1E678"/>
                      <Color>808080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>[pBhvAssassin]+D8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>11433</ID>
                      <Description>"(when already in conflict, move out of sight...)"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>11832</ID>
                      <Description>"BhvAssassin ~ Base"</Description>
                      <LastState Value="0000000181D1E5A0" RealAddress="183620020"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>C0C0C0</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pBhvAssassin</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>14307</ID>
                  <Description>"Near Death (= 1)"</Description>
                  <LastState Value="0" RealAddress="181D7CB68"/>
                  <Color>808080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>[pHealth]+E8</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>2207</ID>
                  <Description>"Desync (= 1)"</Description>
                  <LastState Value="0" RealAddress="181D7CC84"/>
                  <Color>808080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>[pHealth]+204</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>13895</ID>
                  <Description>"CSrvPlayerHealth ~ Base"</Description>
                  <LastState Value="0000000181D7CA80" RealAddress="183620030"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>C0C0C0</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>pHealth</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>11900</ID>
              <Description>"Inventory Supplies..."</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : ACS.exe
  Version: 
  Date   : 2020-05-22
  Author : Paul44

  Allows you to edit inventory items...

   1 = Money                   14 = Bullets                 56 = Leather
   5 = Smoke Bombs             43 = Throwing Knives         57 = Iron
   8 = Voltaic Bombs           44 = Hallucinogenic Darts    58 = Chemicals
   9 = Fear Bombs              45 = Medicine                60 = Thread
  10 = Spikes

}

[ENABLE]

{$lua}
-- info source: google "cheat engine Can CE typecast value at the end of [pointer chain]"
-- (see any Address value's offset definition for example...)
-- function used in prev version, now replaced by current solution...
--
--[[
if sym_lookup_xptr then
   unregisterSymbolLookupCallback(sym_lookup_xptr)
   sym_lookup_xptr = nil
 end
 sym_lookup_xptr = registerSymbolLookupCallback(function(str)
 --print(str)
   local vt, addr = str:match('^(%a-)[_%s]?[pP][tT][rR]%s?(%b[])$')
   if not (vt and addr) then return 0 end
   vt = string.upper(vt)

   addr = getAddressSafe(addr:sub(2,-2))
   if not addr then return 0 end

   if vt == 'WORD' then
     return readSmallInteger(addr)
   else
     return 0
   end
--[[
   if vt == 'BYTE' then
     return readBytes(addr, 1, false)
   elseif vt == 'WORD' then
     return readSmallInteger(addr)
   elseif vt == 'DWORD' then
     return readInteger(addr)
   elseif vt == 'QWORD' then
     return readQword(addr)
   elseif vt == 'FLOAT' then
     return math.floor(readFloat(addr))
   elseif vt == 'DOUBLE' then
     return math.floor(readDouble(addr))
   else
     return 0
   end

 end, slNotSymbol)
]]--

{$asm}
// Using 'pUIMinimapMgr' code to build inventoryTable...
aobscanmodule(Inventory,$process,48 63 48 0C 48 8B 10 48 C1 E1 20 48 C1 F9 3F 48 23 D1 8B 42)
registersymbol(Inventory)
alloc(newmem,$100,$process)

label(code)
label(code2)
label(code3)
label(return)

newmem:
{$try}
  // rdx+08 = itemID ~ edi
  push rax
  push rbx
  push rcx
  push rdx
  push rdi
  push rsi
  // rax = counter...
  // rbx = start inventory list ~&gt; current record
  // ecx = loop length inventory list
  // introduced 'check' to prevent crashing while 'Replaying' missions...
  xor rax,rax
  mov rsi,[pInventory]
  mov rsi,[rsi]
  mov rbx,[pInventCheck]
  cmp rbx,rsi
  jne code3
  mov rsi,[pInventory]
  add rsi,0x28
  mov cx,word ptr [rsi+8]
  mov rsi,[rsi]
code2:
  inc ax
  mov rbx,[rsi]
  // get itemID + offset table indexvalue...
  mov edi,dword ptr [rbx+08]
  imul edi,2
  // save in offset table
  lea rdx,[tInventory]
  add rdx,edi
  mov [rdx],ax
  add rsi,0x08
  cmp cx,ax
  jg code2
code3:
  pop rsi
  pop rdi
  pop rdx
  pop rcx
  pop rbx
  pop rax
  jmp code
{$except}
  inc [nCrash4]
code:
  movsxd  rcx,dword ptr [rax+0C]
  mov rdx,[rax]
  jmp return

Inventory:
  jmp newmem
  db 90 90
return:


[DISABLE]

Inventory:
  db 48 63 48 0C 48 8B 10

unregistersymbol(Inventory)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+2A9694

"ACS.exe"+2A967D: CC                    -  int 3
"ACS.exe"+2A967E: CC                    -  int 3
"ACS.exe"+2A967F: CC                    -  int 3
"ACS.exe"+2A9680: 48 8B 15 69 59 E1 06  -  mov rdx,[ACS.exe+70BEFF0]
"ACS.exe"+2A9687: E9 24 9B 00 00        -  jmp ACS.exe+2B31B0
"ACS.exe"+2A968C: CC                    -  int 3
"ACS.exe"+2A968D: CC                    -  int 3
"ACS.exe"+2A968E: CC                    -  int 3
"ACS.exe"+2A968F: CC                    -  int 3
"ACS.exe"+2A9690: 48 8B 41 40           -  mov rax,[rcx+40]
// ---------- INJECTING HERE ----------
"ACS.exe"+2A9694: 48 63 48 0C           -  movsxd  rcx,dword ptr [rax+0C]
"ACS.exe"+2A9698: 48 8B 10              -  mov rdx,[rax]
// ---------- DONE INJECTING  ----------
"ACS.exe"+2A969B: 48 C1 E1 20           -  shl rcx,20
"ACS.exe"+2A969F: 48 C1 F9 3F           -  sar rcx,3F
"ACS.exe"+2A96A3: 48 23 D1              -  and rdx,rcx
"ACS.exe"+2A96A6: 8B 42 44              -  mov eax,[rdx+44]
"ACS.exe"+2A96A9: 8B 4A 48              -  mov ecx,[rdx+48]
"ACS.exe"+2A96AC: 48 8B 15 3D 59 E1 06  -  mov rdx,[ACS.exe+70BEFF0]
"ACS.exe"+2A96B3: 80 BA 85 00 00 00 00  -  cmp byte ptr [rdx+00000085],00
"ACS.exe"+2A96BA: 74 08                 -  je ACS.exe+2A96C4
"ACS.exe"+2A96BC: 83 F9 01              -  cmp ecx,01
"ACS.exe"+2A96BF: 75 08                 -  jne ACS.exe+2A96C9
}
</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Toggle Activation</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>73</Key>
                  </Keys>
                  <ID>0</ID>
                  <ActivateSound TTS="EN">Activated</ActivateSound>
                  <DeactivateSound TTS="EN">Deactivated</DeactivateSound>
                </Hotkey>
              </Hotkeys>
              <CheatEntries>
                <CheatEntry>
                  <ID>14128</ID>
                  <Description>"Money"</Description>
                  <LastState Value="47020" RealAddress="7FF4FA486668"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+1*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>11703</ID>
                  <Description>"Throwing Knifes"</Description>
                  <LastState Value="15" RealAddress="7FF4FA486528"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+2B*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14132</ID>
                  <Description>"Smoke Bombs"</Description>
                  <LastState Value="6" RealAddress="7FF4FA4864A8"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+5*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14131</ID>
                  <Description>"Bullets"</Description>
                  <LastState Value="28" RealAddress="7FF4FA488068"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+E*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14130</ID>
                  <Description>"Hallucinogenic Darts"</Description>
                  <LastState Value="2" RealAddress="7FF4FA486468"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+2C*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14129</ID>
                  <Description>"Voltaic Bombs"</Description>
                  <LastState Value="6" RealAddress="7FF4FA482BA8"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+8*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14133</ID>
                  <Description>"Medicine"</Description>
                  <LastState Value="2" RealAddress="7FF4FA489368"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+2D*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14138</ID>
                  <Description>"--- DLC Jack The Ripper"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>14136</ID>
                  <Description>"Spikes"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+A*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14137</ID>
                  <Description>"Fear Bombs"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+9*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14151</ID>
                  <Description>"--- Crafting"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>14135</ID>
                  <Description>"Leather"</Description>
                  <LastState Value="1673" RealAddress="7FF4FA486C68"/>
                  <VariableType>2 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+38*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14134</ID>
                  <Description>"Iron"</Description>
                  <LastState Value="1419" RealAddress="7FF4FA487828"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+39*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14140</ID>
                  <Description>"Thread"</Description>
                  <LastState Value="715" RealAddress="7FF4FA48A7E8"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+3C*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14139</ID>
                  <Description>"Chemicals"</Description>
                  <LastState Value="821" RealAddress="7FF4FA489328"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <Offsets>
                    <Offset>28</Offset>
                    <Offset>(readSmallInteger("tInventory+3A*2")-1)*8</Offset>
                    <Offset>28</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>11791</ID>
                  <Description>"InventoryDataItem ~ Base"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="00007FF4FA182A00" RealAddress="183620040"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>C0C0C0</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>pInventory</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>14299</ID>
                      <Description>"InventoryCheck"</Description>
                      <LastState Value="0000000142B6E2F0" RealAddress="183620050"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>C0C0C0</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pInventCheck</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>13835</ID>
                  <Description>"LogicalInventory ~ Base"</Description>
                  <LastState Value="0000000142BBF260" RealAddress="7FF4FA182A20"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>C0C0C0</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>[pInventory]+20</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>383</ID>
              <Description>"Teleport &amp; Coordinates..."</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : ACS.exe
  Version:
  Date   : 2020-05-15
  Author : Paul44

  Free Roaming...
  (using 'write coordinates' routine)
}

[ENABLE]
// Entity ~ see main script...
// code writes coordinates... rax+30 = x-coordinate...
aobscanmodule(pCoord,$process,0F 29 41 50 0F 28 4A 30 0F 29 49 60 C3)
registersymbol(pCoord)
alloc(newmem,$100,$process)


// Map waypoint...
globalalloc(pMapWayp,8,$process)
globalalloc(nDropHeight,4,$process)
globalalloc(bDropHigh,1,$process)

//globalalloc(pFreeRoam,8,$process)

// Free cam routine...
// ID of freecam script in CE table...
globalalloc(AddrListID,4,"$process")

// save current location x,y,z coordinates (float)...
globalalloc(OrigCoord,12,"$process")
// init script variables
globalalloc(XYstepVal,4,"$process")
globalalloc(ZstepVal,4,"$process")
globalalloc(ZstepdropHeight,4,"$process")

globalalloc(Xval,4,"$process")
globalalloc(Yval,4,"$process")
globalalloc(Zval,4,"$process")
globalalloc(bInit,1,"$process")
globalalloc(bInit2,1,"$process")
globalalloc(bFreeRoam,1,"$process")


AddrListID:
dd (int)1479


nDropHeight:
dd (float)40.0

XYstepVal:
dd (float)2.0

ZstepVal:
dd 0x3F800000

ZstepdropHeight:
dd (float)2.0


bInit:
db 00

bInit2:
db 00

bFreeRoam:
db 00

bDropHigh:
db 01

// fill in offset here ~ see table coordinates...
pStructCrdOffset:
dd 60

label(code)
label(init)
label(return)

// subroutines...
alloc(storeOrig,$100,$process)
alloc(updateCrd,$100,$process)

storeOrig:
  // store original coordinates...
  push rax
  mov rbx,[pStructCrdBase]
  add rbx,[pStructCrdOffset]
  lea rcx,[OrigCoord]
  mov rdx,dword ptr [rbx]
  mov [rcx],rdx
  lea rax,[Xval]
  mov [rax],rdx
  add rbx,4
  add rcx,4
  mov rdx,dword ptr [rbx]
  mov [rcx],rdx
  lea rax,[Yval]
  mov [rax],rdx
  add rbx,4
  add rcx,4
  mov rdx,dword ptr [rbx]
  mov [rcx],rdx
  lea rax,[Zval]
  mov [rax],rdx
  pop rax
  ret

updateCrd:
  // updated coordinates...
  mov rbx,[pStructCrdBase]
  add rbx,[pStructCrdOffset]
  mov rdx,dword ptr [XVal]
  mov [rbx],rdx
  add rbx,4
  mov rdx,dword ptr [YVal]
  mov [rbx],rdx
  add rbx,4
  mov rdx,dword ptr [ZVal]
  mov [rbx],rdx
  ret


// Player roaming...
newmem:
{$try}
  movaps [rcx+50],xmm0
  movaps xmm1,[rdx+30]
@@:
  push rbx
  mov rbx,[pEntity]
  //sub rbx,0x20
  cmp rbx,rcx
  pop rbx
  jne code
  // freecam routines... x64: 8-byte ptrs &amp; r?x registers...
  cmp byte ptr [bFreeRoam],1
  jne code
  push rbx
  push rcx
  push rdx
  mov rbx,[pEntity]
  mov [pStructCrdBase],rbx
  // original coordinates...
  cmp [bInit],1
  jg init
  call storeOrig
  inc [bInit]
init:
  // updated coordinates...
  call updateCrd
  mov rbx,[pStructCrdBase]
  movaps xmm1,[rbx+60]
  // restore original registers...
  pop rdx
  pop rcx
  pop rbx
  jmp code
{$except}
  inc [nCrash2]
code:
  jmp return

pCoord:
  jmp newmem
  db 90 90 90
return:

[DISABLE]

pCoord:
  db 0F 29 41 50 0F 28 4A 30

unregistersymbol(pCoord)
dealloc(newmem)

dealloc(storeOrig)
dealloc(updateCrd)


{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+1C4D2A3

"ACS.exe"+1C4D28B: CC                       -  int 3
"ACS.exe"+1C4D28C: CC                       -  int 3
"ACS.exe"+1C4D28D: CC                       -  int 3
"ACS.exe"+1C4D28E: CC                       -  int 3
"ACS.exe"+1C4D28F: CC                       -  int 3
"ACS.exe"+1C4D290: 0F 28 02                 -  movaps xmm0,[rdx]
"ACS.exe"+1C4D293: 0F 29 41 30              -  movaps [rcx+30],xmm0
"ACS.exe"+1C4D297: 0F 28 4A 10              -  movaps xmm1,[rdx+10]
"ACS.exe"+1C4D29B: 0F 29 49 40              -  movaps [rcx+40],xmm1
"ACS.exe"+1C4D29F: 0F 28 42 20              -  movaps xmm0,[rdx+20]
// ---------- INJECTING HERE ----------
"ACS.exe"+1C4D2A3: 0F 29 41 50              -  movaps [rcx+50],xmm0
"ACS.exe"+1C4D2A7: 0F 28 4A 30              -  movaps xmm1,[rdx+30]
// ---------- DONE INJECTING  ----------
"ACS.exe"+1C4D2AB: 0F 29 49 60              -  movaps [rcx+60],xmm1
"ACS.exe"+1C4D2AF: C3                       -  ret
"ACS.exe"+1C4D2B0: 48 83 EC 38              -  sub rsp,38
"ACS.exe"+1C4D2B4: 4C 8B 51 20              -  mov r10,[rcx+20]
"ACS.exe"+1C4D2B8: 0F B6 44 24 60           -  movzx eax,byte ptr [rsp+60]
"ACS.exe"+1C4D2BD: 4D 85 D2                 -  test r10,r10
"ACS.exe"+1C4D2C0: 74 16                    -  je ACS.exe+1C4D2D8
"ACS.exe"+1C4D2C2: 88 44 24 28              -  mov [rsp+28],al
"ACS.exe"+1C4D2C6: 49 8B CA                 -  mov rcx,r10
"ACS.exe"+1C4D2C9: C6 44 24 20 00           -  mov byte ptr [rsp+20],00
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>386</ID>
                  <Description>"X-axis"</Description>
                  <LastState Value="-283,0639954" RealAddress="C7366540"/>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>[pEntity]+60</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>387</ID>
                  <Description>"Y-axis"</Description>
                  <LastState Value="-118,3378372" RealAddress="C7366544"/>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>[pEntity]+64</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>388</ID>
                  <Description>"Z-axis"</Description>
                  <LastState Value="15,18078899" RealAddress="C7366548"/>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>[pEntity]+68</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>11904</ID>
                  <Description>"Map Waypoint..."</Description>
                  <Options moHideChildren="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : ACS.exe
  Version: 
  Date   : 2020-05-22
  Author : Paul44

  Gets coordinates of waypoint marker...
}

[ENABLE]
aobscanmodule(MapMarker,$process,0F 29 40 60 48 8B 48 28)
registersymbol(MapMarker)
alloc(newmem,$100,$process)

globalalloc(pMapWayp,8,$process)

label(code)
label(return)

newmem:
  // ptrs change constantly...
  // need research to see if 0x142B3C400 changes in time (or RAMsize)...
  // excludings icons... for now
  push rbx
  mov rbx,[pUIMapCheck1]
  cmp rbx,[rax]
  pop rbx
  jne code
  mov [pMapWayp],rax
code:
  movaps [rax+60],xmm0
  mov rcx,[rax+28]
  jmp return

MapMarker:
  jmp newmem
  db 90 90 90
return:


[DISABLE]

MapMarker:
  db 0F 29 40 60 48 8B 48 28

unregistersymbol(MapMarker)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+2C5987

"ACS.exe"+2C5961: 41 8B 06                    -  mov eax,[r14]
"ACS.exe"+2C5964: 89 44 24 30                 -  mov [rsp+30],eax
"ACS.exe"+2C5968: 45 33 C0                    -  xor r8d,r8d
"ACS.exe"+2C596B: 48 8B 54 24 30              -  mov rdx,[rsp+30]
"ACS.exe"+2C5970: E8 0B EE 08 02              -  call ACS.exe+2354780
"ACS.exe"+2C5975: 48 85 C0                    -  test rax,rax
"ACS.exe"+2C5978: 74 31                       -  je ACS.exe+2C59AB
"ACS.exe"+2C597A: 48 8B 00                    -  mov rax,[rax]
"ACS.exe"+2C597D: C6 80 90 00 00 00 01        -  mov byte ptr [rax+00000090],01
"ACS.exe"+2C5984: 0F 28 07                    -  movaps xmm0,[rdi]
// ---------- INJECTING HERE ----------
"ACS.exe"+2C5987: 0F 29 40 60                 -  movaps [rax+60],xmm0
"ACS.exe"+2C598B: 48 8B 48 28                 -  mov rcx,[rax+28]
// ---------- DONE INJECTING  ----------
"ACS.exe"+2C598F: 48 63 41 0C                 -  movsxd  rax,dword ptr [rcx+0C]
"ACS.exe"+2C5993: 48 8B 09                    -  mov rcx,[rcx]
"ACS.exe"+2C5996: 48 C1 E0 20                 -  shl rax,20
"ACS.exe"+2C599A: 48 C1 F8 3F                 -  sar rax,3F
"ACS.exe"+2C599E: 48 23 C8                    -  and rcx,rax
"ACS.exe"+2C59A1: 74 08                       -  je ACS.exe+2C59AB
"ACS.exe"+2C59A3: 48 8B D7                    -  mov rdx,rdi
"ACS.exe"+2C59A6: E8 85 79 98 01              -  call ACS.exe+1C4D330
"ACS.exe"+2C59AB: 48 85 DB                    -  test rbx,rbx
"ACS.exe"+2C59AE: 74 08                       -  je ACS.exe+2C59B8
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>231</ID>
                      <Description>"(Help ~ Enable 'God mode' first before teleporting...)"</Description>
                      <Options moHideChildren="1"/>
                      <LastState/>
                      <Color>008000</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : ACU.exe
  Version:
  Date   : 2018-05-17
  Author : Paul44

  HowTo: Teleporting...
}

[ENABLE]

{$lua}
  local sMessage = [[
 1.  Open map and select a location
      (avoid 'system' icons, such as ViewPoint !)
 2.  Press [Shift+T] twice while still in the map view...!
     (if done correctly, player icon should reposition accordingly)
 3.  Press [ESC] to teleport to that particular location
      (see also [Readme] file)

 Note: do not forget to enable [God mode] first.
  ]]

  showMessage(sMessage)

return error()

{$asm}

[DISABLE]

</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>232</ID>
                          <Description>"World ~ Base Address"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>pWorld</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>326</ID>
                      <Description>"Drop Height"</Description>
                      <LastState Value="40" RealAddress="183620370"/>
                      <VariableType>Float</VariableType>
                      <Address>nDropHeight</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14288</ID>
                      <Description>"Drop High... (= 1)"</Description>
                      <LastState Value="1" RealAddress="183620380"/>
                      <VariableType>Byte</VariableType>
                      <Address>bDropHigh</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>267</ID>
                      <Description>"Teleport to Waypoint..."</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : ACU.exe
  Version:
  Date   : 2018-05-17
  Author : Paul44

  Teleports player to Map Waypoint Marker...
}

[ENABLE]


{$lua}
-- only evaluate following 2 records...
local addrMap = readPointer(getAddress("pMapWayp"))
local checkPtr = readPointer(addrMap)
local addrCheckPtr1 = readPointer(getAddress("pUIMapCheck1"))
--local addrCheckPtr2 = readPointer(getAddress("pUIMapCheck2"))
if not (checkPtr == addrCheckPtr1) then return end

local addrEntity = readPointer(getAddress("pEntity"))
local CrdOffset = readInteger(getAddress("pStructCrdOffset"))
addrEntity = addrEntity + CrdOffset

local coordX = readFloat(addrEntity)
local coordY = readFloat(addrEntity+0x4)
local coordZ = readFloat(addrEntity+0x8)
-- if error, restore original coordinates...
if not pcall(SetCoord) then
    --print('errors...')
    local addrC3 = getAddress("nCrash3")
    local nCount = readInteger(addrC3)
    nCount = nCount + 1
    writeInteger(addrC3, nCount)
    writeFloat(addrEntity,coordX)
    writeFloat(addrEntity+0x4,coordY)
    writeFloat(addrEntity+0x8,coordZ)
end

function SetCoord()
    -- Icon Coordinates also reside in Base structure: +50 .. +54 .. +58
    local IconHeight = 2.0
    -- Map waypoint does not have a Z-value, so we use a fixed Z-value...

    local addrHeight = getAddress("nDropHeight")
    local fHeight = readFloat(addrHeight)
    local bDropHigh = readBytes(getAddress("bDropHigh"))
    --print(string.format('&lt;['.. "%02x" ..']&gt;',addrEntity))
    local MapX = readFloat(addrMap+0x60)
    local MapY = readFloat(addrMap+0x64)
    local MapZ = readFloat(addrMap+0x68)
    if (MapZ == 0) then MapZ = fHeight end
    --local MapZ = readFloat(addrHeight)
    -- in case an icon is selected: 0x20 ~= 0 ~ not all of them return coordinates...

    --local bIcon = readInteger(addrMap+0x20)
    --local IconX = readFloat(addrMap+0x60)
    --local IconY = readFloat(addrMap+0x64)
    --local IconZ = readFloat(addrMap+0x68)
    --print(string.format("[%f]",MapZ))
    local bMapUpdate = true
    local bIconUpdate = false

    if MapX ~= MapX or MapY ~= MapY then bMapUpdate = false end
    if MapX == nil or MapY == nil or (MapX == 0 and MapY == 0) then
        bMapUpdate = false
    elseif math.floor(MapX) == -1 or math.floor(MapY) == -1 then
        bMapUpdate = false
    end
    --[[
    if bIcon == 0 then bIconUpdate = false end
    if bIcon ~= 0 and checkPtr == 0x142EE3F10 then bIconUpdate = true end
    if IconX ~= IconX or IconY ~= IconY or IconZ ~= IconZ then bIconUpdate = false end
    if IconX == 0 and IconY == 0 then bIconUpdate = false end
    if IconX == nil or IconY == nil or IconZ == nil then bIconUpdate = false end
    --print(string.format('[ %s ]',bIconUpdate))


    if bIconUpdate then
        writeFloat(addrEntity,IconX)
        writeFloat(addrEntity+0x4,IconY)
        writeFloat(addrEntity+0x8,math.max(IconZ+IconHeight,MapZ))
    else ]]--
    --print(string.format("*[%s]*",tostring(bMapUpdate)))
    if bMapUpdate then
        --max: less chance of falling through surface - min: eliminates extreme high values...
        if (bDropHigh == 0) then
            writeFloat(addrEntity+0x8,MapZ+IconHeight)
        else
            writeFloat(addrEntity+0x8,math.min(math.max(MapZ+IconHeight,fHeight),100))
        end
        writeFloat(addrEntity,MapX)
        writeFloat(addrEntity+0x4,MapY)
    end
end

{$asm}
// disables script automatically by CE...
test al,al

[DISABLE]
</AssemblerScript>
                      <Hotkeys>
                        <Hotkey>
                          <Action>Toggle Activation</Action>
                          <Keys>
                            <Key>16</Key>
                            <Key>84</Key>
                          </Keys>
                          <ID>1</ID>
                        </Hotkey>
                      </Hotkeys>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>11906</ID>
                          <Description>"Icon X"</Description>
                          <LastState Value="-238,0993347" RealAddress="18253D3C0"/>
                          <Color>808080</Color>
                          <VariableType>Float</VariableType>
                          <Address>[pMapWayp]+60</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>11905</ID>
                          <Description>"Icon Y"</Description>
                          <LastState Value="176,2332001" RealAddress="18253D3C4"/>
                          <Color>808080</Color>
                          <VariableType>Float</VariableType>
                          <Address>[pMapWayp]+64</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>11908</ID>
                          <Description>"Icon Z"</Description>
                          <LastState Value="22,398592" RealAddress="18253D3C8"/>
                          <Color>808080</Color>
                          <VariableType>Float</VariableType>
                          <Address>[pMapWayp]+68</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1336</ID>
                          <Description>"(UIMapCheck)"</Description>
                          <LastState Value="0000000142B40558" RealAddress="1836200A0"/>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pUIMapCheck1</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>14317</ID>
                          <Description>"(MapMarker)"</Description>
                          <LastState Value="000000018253D360" RealAddress="183620360"/>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pMapWayp</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>14318</ID>
                          <Description>"(UIMinimapMgr)"</Description>
                          <LastState Value="0000000056059900" RealAddress="183620060"/>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pUIMinimapMgr</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1479</ID>
                  <Description>"Free Roam... (Enable Godmode FIRST !)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <Color>000000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : AC4BFSP.exe
  Version: 
  Date   : 2018-04-30
  Author : Paul44

  Dis/enable Free Cam
}


[ENABLE]
luacall(ActivateTimer())

bFreeRoam:
db 01

[DISABLE]
luacall(tmer.destroy())

bFreeRoam:
db 00

bInit:
db 00

bInit2:
db 00
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys/>
                      <ID>0</ID>
                      <ActivateSound TTS="EN">Activated</ActivateSound>
                      <DeactivateSound TTS="EN">Deactivated</DeactivateSound>
                    </Hotkey>
                  </Hotkeys>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>48</ID>
                      <Description>"Free Roam Help~Info (see also Readme file)"</Description>
                      <LastState/>
                      <Color>008000</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : AC4BFSP.exe
  Version:
  Date   : 2018-03-23
  Author : Paul44

  Help instructions on how to use the 'hover' function
}

[ENABLE]
{$lua}
if getOpenedProcessID() ~= 0 then
    luacall(Help())
end

{$asm}
// disable script in CE table
// apparently, using an ASM opcode that is syntactically correct, but can not be
// AA-ed by CE causes it to disable the script automatically...

test al,al
//dd (int)48

[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1337</ID>
                      <Description>"Script values"</Description>
                      <Options moHideChildren="1"/>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1344</ID>
                          <Description>"XYstepVal"</Description>
                          <LastState Value="2" RealAddress="1836203B0"/>
                          <VariableType>Float</VariableType>
                          <Address>XYstepVal</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1345</ID>
                          <Description>"ZstepVal"</Description>
                          <LastState Value="1" RealAddress="1836203C0"/>
                          <VariableType>Float</VariableType>
                          <Address>ZstepVal</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1346</ID>
                          <Description>"ZstepdropHeight"</Description>
                          <LastState Value="2" RealAddress="1836203D0"/>
                          <VariableType>Float</VariableType>
                          <Address>ZstepdropHeight</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1473</ID>
                          <Description>"Xval"</Description>
                          <LastState Value="-283,2723694" RealAddress="1836203E0"/>
                          <Color>808080</Color>
                          <VariableType>Float</VariableType>
                          <Address>Xval</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1474</ID>
                          <Description>"Yval"</Description>
                          <LastState Value="-119,2051849" RealAddress="1836203F0"/>
                          <Color>808080</Color>
                          <VariableType>Float</VariableType>
                          <Address>Yval</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1475</ID>
                          <Description>"Zval"</Description>
                          <LastState Value="15,18026161" RealAddress="183620400"/>
                          <Color>808080</Color>
                          <VariableType>Float</VariableType>
                          <Address>Zval</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1476</ID>
                          <Description>"OrigCoord X"</Description>
                          <LastState Value="-283,2723694" RealAddress="1836203A0"/>
                          <Color>808080</Color>
                          <VariableType>Float</VariableType>
                          <Address>OrigCoord</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1477</ID>
                          <Description>"OrigCoord Y"</Description>
                          <LastState Value="-119,2051849" RealAddress="1836203A4"/>
                          <Color>808080</Color>
                          <VariableType>Float</VariableType>
                          <Address>OrigCoord+4</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1343</ID>
                          <Description>"OrigCoord Z"</Description>
                          <LastState Value="15,18026161" RealAddress="1836203A8"/>
                          <Color>808080</Color>
                          <VariableType>Float</VariableType>
                          <Address>OrigCoord+8</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>14326</ID>
                  <Description>"Cam Distance"</Description>
                  <Options moHideChildren="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : ACS.exe
  Version: 
  Date   : 2020-07-27
  Author : Paul44

  Manage camera distance to player ~ FOV)
  (main research performed by #arthurclg17 @csrinru ~ ACUPlayerCameraComponent)
}

[ENABLE]

aobscanmodule(FreeCam,$process,F3 0F 11 16 0F 28 55 AF)
registersymbol(FreeCam)
alloc(newmem,$100,$process)

globalalloc(pFreeCam,8,$process)
globalalloc(FOVCam,4,$process)

// default value ~ see aobscan [C7 06 DB 0F 49 3F]...
FOVCam:
dd 3F490FDB

label(code)
label(return)

newmem:
  movss [rsi],xmm2
  movaps xmm2,[rbp-51]
code:
  mov [pFreeCam],rsi
  push rax
  mov rax,[FOVCam]
  mov [rsi],rax
  pop rax
  jmp return

FreeCam:
  jmp newmem
  nop 3
return:


[DISABLE]

FreeCam:
  db F3 0F 11 16 0F 28 55 AF

unregistersymbol(FreeCam)
dealloc(newmem)

FOVCam:
dd 3F490FDB

{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+197D4DF

"ACS.exe"+197D4B4: 0F 28 BC 24 A0 00 00 00  -  movaps xmm7,[rsp+000000A0]
"ACS.exe"+197D4BC: F3 0F 10 DE              -  movss xmm3,xmm6
"ACS.exe"+197D4C0: 0F 28 E0                 -  movaps xmm4,xmm0
"ACS.exe"+197D4C3: 0F C6 DB 00              -  shufps xmm3,xmm3,00
"ACS.exe"+197D4C7: F3 0F 59 D6              -  mulss xmm2,xmm6
"ACS.exe"+197D4CB: 0F 5C 4D DF              -  subps xmm1,[rbp-21]
"ACS.exe"+197D4CF: F3 0F 11 23              -  movss [rbx],xmm4
"ACS.exe"+197D4D3: F3 0F 58 55 77           -  addss xmm2,[rbp+77]
"ACS.exe"+197D4D8: 0F 59 CB                 -  mulps xmm1,xmm3
"ACS.exe"+197D4DB: 0F 58 4D DF              -  addps xmm1,[rbp-21]
// ---------- INJECTING HERE ----------
"ACS.exe"+197D4DF: F3 0F 11 16              -  movss [rsi],xmm2
"ACS.exe"+197D4E3: 0F 28 55 AF              -  movaps xmm2,[rbp-51]
// ---------- DONE INJECTING  ----------
"ACS.exe"+197D4E7: 0F 5C 55 BF              -  subps xmm2,[rbp-41]
"ACS.exe"+197D4EB: 0F 59 D3                 -  mulps xmm2,xmm3
"ACS.exe"+197D4EE: 0F 58 55 BF              -  addps xmm2,[rbp-41]
"ACS.exe"+197D4F2: 41 0F 29 16              -  movaps [r14],xmm2
"ACS.exe"+197D4F6: F3 0F 10 95 83 00 00 00  -  movss xmm2,[rbp+00000083]
"ACS.exe"+197D4FE: 41 0F 29 0F              -  movaps [r15],xmm1
"ACS.exe"+197D502: F3 0F 5C 55 AB           -  subss xmm2,[rbp-55]
"ACS.exe"+197D507: F3 0F 10 4D 7F           -  movss xmm1,[rbp+7F]
"ACS.exe"+197D50C: F3 0F 5C 4D A7           -  subss xmm1,[rbp-59]
"ACS.exe"+197D511: F3 0F 59 D6              -  mulss xmm2,xmm6
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>14330</ID>
                      <Description>"(applies to all cam perspectives)"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14327</ID>
                      <Description>"Cam Distance (Default = 0.785)"</Description>
                      <LastState Value="0,7853981853" RealAddress="183620450"/>
                      <VariableType>Float</VariableType>
                      <Address>FOVCam</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14328</ID>
                      <Description>"Actual Cam Distance"</Description>
                      <LastState Value="0,7853981853" RealAddress="181D1A3F0"/>
                      <Color>808080</Color>
                      <VariableType>Float</VariableType>
                      <Address>[pFreeCam]</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14329</ID>
                      <Description>"(base)"</Description>
                      <LastState Value="0000000181D1A3F0" RealAddress="183620440"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>C0C0C0</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pFreeCam</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>13852</ID>
                  <Description>"PlayerID"</Description>
                  <LastState Value="1" RealAddress="C73665A0"/>
                  <Color>808080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>[pEntity]+C0</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>384</ID>
                  <Description>"Entity ~ Base Address"</Description>
                  <LastState Value="00000000C73664E0" RealAddress="183620010"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>C0C0C0</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>pEntity</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>14633</ID>
              <Description>"Freeze Mission Timer..."</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>14471</ID>
                  <Description>"Freeze Mission Timer I..."</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : ACU.exe
  Version: 
  Date   : 2020-09-06
  Author : Paul44

  Manages mission timer(s)..
  - Seq 5 Mem 6 - The lady with the lamp: 8 min
  - Seq 7 Mem 2 - The bodyguard: 1 min
    (note: disable script once carriage is hijacked to allow continuation !)
  - ...
}

[ENABLE]
// struct: TimerOperatorData
// D0: flag timer pause ~ will continue in background!
aobscanmodule(MissionTimer,$process,48 8B 81 B8 00 00 00 49 3B)
registersymbol(MissionTimer)
alloc(newmem,$100,$process)

globalalloc(pMissionTimer,8,$process)
globalalloc(IntTimerDiffer,4,$process)
globalalloc(bMissionTimer,1,$process)

pMissionTimer:
dq (int)0

IntTimerDiffer:
dd (int)0

bMissionTimer:
db 0


label(code)
label(code2)
label(return)

newmem:
  push rbx
  push rdi
  // 2 records:
  //* first record manages main timer...
  //* 2nd one checks/gives warning "not reaching asylum in time"...
  test rcx,rcx
  je code
  cmp [pMissionTimer],0
  jne short @f
  mov [pMissionTimer],rcx
@@:
  cmp [bMissionTimer],1
  jne code2
  mov rbx,[rcx+B8]
  mov rdi,[rcx+C8]
  mov rdi,[rdi]
  cmp [IntTimerDiffer],0
  jne short @f
  sub rbx,rdi
  mov [IntTimerDiffer],rbx
@@:
  add rdi,[IntTimerDiffer]
  mov [rcx+B8],rdi
  jmp code
code2:
  mov [IntTimerDiffer],0
code:
  pop rdi
  pop rbx
@@:
  mov rax,[rcx+000000B8]
  jmp return

MissionTimer:
  jmp newmem
  db 90 90
return:


[DISABLE]

pMissionTimer:
dq (int)0

IntTimerDiffer:
dd (int)0

bMissionTimer:
db 0


MissionTimer:
  db 48 8B 81 B8 00 00 00

unregistersymbol(MissionTimer)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+105367C

"ACS.exe"+105365C: CC                       -  int 3
"ACS.exe"+105365D: CC                       -  int 3
"ACS.exe"+105365E: CC                       -  int 3
"ACS.exe"+105365F: CC                       -  int 3
"ACS.exe"+1053660: 80 B9 D1 00 00 00 00     -  cmp byte ptr [rcx+000000D1],00
"ACS.exe"+1053667: 74 09                    -  je ACS.exe+1053672
"ACS.exe"+1053669: 4C 8B 81 C0 00 00 00     -  mov r8,[rcx+000000C0]
"ACS.exe"+1053670: EB 0A                    -  jmp ACS.exe+105367C
"ACS.exe"+1053672: 48 8B 81 C8 00 00 00     -  mov rax,[rcx+000000C8]
"ACS.exe"+1053679: 4C 8B 00                 -  mov r8,[rax]
// ---------- INJECTING HERE ----------
"ACS.exe"+105367C: 48 8B 81 B8 00 00 00     -  mov rax,[rcx+000000B8]
// ---------- DONE INJECTING  ----------
"ACS.exe"+1053683: 49 3B C0                 -  cmp rax,r8
"ACS.exe"+1053686: 73 04                    -  jae ACS.exe+105368C
"ACS.exe"+1053688: 33 C0                    -  xor eax,eax
"ACS.exe"+105368A: EB 03                    -  jmp ACS.exe+105368F
"ACS.exe"+105368C: 49 2B C0                 -  sub rax,r8
"ACS.exe"+105368F: F3 0F 10 15 49 6D AC 01  -  movss xmm2,[ACS.exe+2B1A3E0]
"ACS.exe"+1053697: 41 B8 30 75 00 00        -  mov r8d,00007530
"ACS.exe"+105369D: 0F 57 C0                 -  xorps xmm0,xmm0
"ACS.exe"+10536A0: F3 49 0F 2A C0           -  cvtsi2ss xmm0,r8
"ACS.exe"+10536A5: 4D 85 C0                 -  test r8,r8
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>14472</ID>
                      <Description>"(you can also increment 'Remaining time' ~ pause timer first !)"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14473</ID>
                      <Description>"Pause timer (1 = Pause / 0 = Continue)"</Description>
                      <LastState Value="0" RealAddress="183620350"/>
                      <VariableType>Byte</VariableType>
                      <Address>bMissionTimer</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14474</ID>
                      <Description>"Remaining time"</Description>
                      <LastState Value="0" RealAddress="183620340"/>
                      <Color>000000</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>IntTimerDiffer</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14475</ID>
                      <Description>"Start-time (incrementing)"</Description>
                      <Color>808080</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pMissionTimer</Address>
                      <Offsets>
                        <Offset>0</Offset>
                        <Offset>C8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14476</ID>
                      <Description>"End-time"</Description>
                      <Color>808080</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>[pMissionTimer]+B8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14477</ID>
                      <Description>"Max Time limit (secs)"</Description>
                      <Color>808080</Color>
                      <VariableType>Float</VariableType>
                      <Address>[pMissionTimer]+98</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14478</ID>
                      <Description>"Remaining Time (secs)"</Description>
                      <Color>808080</Color>
                      <VariableType>Float</VariableType>
                      <Address>[pMissionTimer]+9C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14479</ID>
                      <Description>"Elapsed Time (secs)"</Description>
                      <Color>808080</Color>
                      <VariableType>Float</VariableType>
                      <Address>[pMissionTimer]+A0</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14480</ID>
                      <Description>"Pause system flag (0=Pause/1=Continue)"</Description>
                      <Color>808080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>[pMissionTimer]+D0</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14481</ID>
                      <Description>"MissionDisplayedTimerCondition ~ Base"</Description>
                      <LastState Value="0000000000000000" RealAddress="183620330"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>C0C0C0</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pMissionTimer</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>14653</ID>
                  <Description>"Freeze Mission Timer II..."</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : ACS.exe
  Version:
  Date   : 2020-09-29
  Author : Paul44

  Manages mission timer(s)..
  - Seq 8 Mem 3 - Fun and games: 2 min
  - Seq 8 Mem 4 - Final act: 1.30 min
  - ...
}

[ENABLE]
// struct: MissionTimedCondition
aobscanmodule(MissionTimer2,$process,48 8B 83 A0 00 00 00 48 8B 00 48 8B)
registersymbol(MissionTimer2)
alloc(newmem,$100,$process)

globalalloc(pMissionTimer2,8,$process)
globalalloc(IntTimerDiffer2,4,$process)
globalalloc(bMissionTimer2,1,$process)

pMissionTimer2:
dq (int)0

IntTimerDiffer2:
dd (int)0

bMissionTimer2:
db 0


label(code)
label(code2)
label(return)

newmem:
  push rcx
  push rdi
  test rbx,rbx
  je code
  mov [pMissionTimer2],rbx
@@:
  cmp [bMissionTimer2],1
  jne code2
  mov rcx,[rbx+90]
  mov rdi,[rbx+A0]
  mov rdi,[rdi]
  cmp [IntTimerDiffer2],0
  jne short @f
  sub rcx,rdi
  mov [IntTimerDiffer2],rcx
@@:
  add rdi,[IntTimerDiffer2]
  mov [rbx+90],rdi
  jmp code
code2:
  mov [IntTimerDiffer2],0
code:
  pop rdi
  pop rcx
@@:
  mov rax,[rbx+000000A0]
  jmp return

MissionTimer2:
  jmp newmem
  db 90 90
return:


[DISABLE]

pMissionTimer2:
dq (int)0

IntTimerDiffer2:
dd (int)0

bMissionTimer2:
db 0


MissionTimer2:
  db 48 8B 83 A0 00 00 00

unregistersymbol(MissionTimer2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+18597FB

"ACS.exe"+18597D1: 48 8B 74 24 38           -  mov rsi,[rsp+38]
"ACS.exe"+18597D6: 48 83 C4 20              -  add rsp,20
"ACS.exe"+18597DA: 5F                       -  pop rdi
"ACS.exe"+18597DB: C3                       -  ret
"ACS.exe"+18597DC: 40 38 BB B4 00 00 00     -  cmp [rbx+000000B4],dil
"ACS.exe"+18597E3: 0F 85 A5 00 00 00        -  jne ACS.exe+185988E
"ACS.exe"+18597E9: 40 38 BB A9 00 00 00     -  cmp [rbx+000000A9],dil
"ACS.exe"+18597F0: 74 09                    -  je ACS.exe+18597FB
"ACS.exe"+18597F2: 48 8B 83 98 00 00 00     -  mov rax,[rbx+00000098]
"ACS.exe"+18597F9: EB 0A                    -  jmp ACS.exe+1859805
// ---------- INJECTING HERE ----------
"ACS.exe"+18597FB: 48 8B 83 A0 00 00 00     -  mov rax,[rbx+000000A0]
// ---------- DONE INJECTING  ----------
"ACS.exe"+1859802: 48 8B 00                 -  mov rax,[rax]
"ACS.exe"+1859805: 48 8B 8B 90 00 00 00     -  mov rcx,[rbx+00000090]
"ACS.exe"+185980C: 48 3B C8                 -  cmp rcx,rax
"ACS.exe"+185980F: 72 06                    -  jb ACS.exe+1859817
"ACS.exe"+1859811: 48 8B F9                 -  mov rdi,rcx
"ACS.exe"+1859814: 48 2B F8                 -  sub rdi,rax
"ACS.exe"+1859817: 0F 57 C9                 -  xorps xmm1,xmm1
"ACS.exe"+185981A: F3 48 0F 2A CF           -  cvtsi2ss xmm1,rdi
"ACS.exe"+185981F: 48 85 FF                 -  test rdi,rdi
"ACS.exe"+1859822: 79 08                    -  jns ACS.exe+185982C
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>14654</ID>
                      <Description>"(you can also increment 'Remaining time' ~ pause timer first !)"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14655</ID>
                      <Description>"Pause timer (1 = Pause / 0 = Continue)"</Description>
                      <LastState Value="0" RealAddress="183620320"/>
                      <VariableType>Byte</VariableType>
                      <Address>bMissionTimer2</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14656</ID>
                      <Description>"Remaining time"</Description>
                      <LastState Value="0" RealAddress="183620310"/>
                      <Color>000000</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>IntTimerDiffer2</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14657</ID>
                      <Description>"Start-time (incrementing)"</Description>
                      <Color>808080</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pMissionTimer2</Address>
                      <Offsets>
                        <Offset>0</Offset>
                        <Offset>A0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14658</ID>
                      <Description>"End-time"</Description>
                      <Color>808080</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>[pMissionTimer2]+90</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14659</ID>
                      <Description>"Max Time limit (secs)"</Description>
                      <Color>808080</Color>
                      <VariableType>Float</VariableType>
                      <Address>[pMissionTimer2]+B8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14660</ID>
                      <Description>"Remaining Time (secs)"</Description>
                      <Color>808080</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>[pMissionTimer2]+BC</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14662</ID>
                      <Description>"Reset (system flag (0=Reset/1)"</Description>
                      <Color>808080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>[pMissionTimer2]+A8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14663</ID>
                      <Description>"MissionDisplayedTimerCondition ~ Base"</Description>
                      <LastState Value="0000000000000000" RealAddress="183620300"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>C0C0C0</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pMissionTimer2</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>14536</ID>
                  <Description>"Freeze Mission timer III..."</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : ACU.exe
  Version:
  Date   : 2020-09-29
  Author : Paul44

  Manage mission timer(s)..
  - Seq 5 Mem 6 - The lady with the lamp: 1 min
  - ...

}

[ENABLE]
// MissionDisplayedTimerCondition: -90
// struct: EventListener: -48
aobscanmodule(ChronoTimer,$process,48 8B 41 18 48 8B 10 48 8B 41 08 48 3B)
registersymbol(ChronoTimer)
alloc(newmem,$100,$process)

globalalloc(pChronoTimer,8,$process)
globalalloc(IntChronoDiffer,4,$process)
globalalloc(IntChronoSecs,4,$process)
globalalloc(bChronoTimer,1,$process)
globalalloc(intDiv,4,$process)

IntChronoDiffer:
dd (int)0

bChronoTimer:
db 0

intDiv:
dd (int)30000                       //#7530


label(code)
label(code2)
label(return)

newmem:
  push rax
  push rbx
  push rdx
  push rdi
  test rcx,rcx
  je code
  mov [pChronoTimer],rcx
  xor rax,rax
  xor rbx,rbx
  xor rdi,rdi
  mov ebx,[rcx+8]
  mov rdi,[rcx+18]
  mov edi,[rdi]
  sub ebx,edi
  // get remaining time in secs...
  mov eax,ebx
  xor rdx,rdx
  div [intDiv]
  mov [IntChronoSecs],eax
  // dis/enable pause...
  cmp [bChronoTimer],1
  jne code2
  cmp [IntChronoDiffer],0
  jne short @f
  mov [IntChronoDiffer],ebx
@@:
  add edi,[IntChronoDiffer]
  mov [rcx+8],edi
  jmp code
code2:
  mov [IntChronoDiffer],0
code:
  pop rdi
  pop rdx
  pop rbx
  pop rax
@@:
  mov rax,[rcx+18]
  mov rdx,[rax]
  jmp return

ChronoTimer:
  jmp newmem
  db 90 90
return:


[DISABLE]

bChronoTimer:
db 0

ChronoTimer:
  db 48 8B 41 18 48 8B 10

unregistersymbol(ChronoTimer)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+20AAAC

"ACS.exe"+20AA96: 48 8B 5C 24 08           -  mov rbx,[rsp+08]
"ACS.exe"+20AA9B: C3                       -  ret
"ACS.exe"+20AA9C: CC                       -  int 3
"ACS.exe"+20AA9D: CC                       -  int 3
"ACS.exe"+20AA9E: CC                       -  int 3
"ACS.exe"+20AA9F: CC                       -  int 3
"ACS.exe"+20AAA0: 80 79 21 00              -  cmp byte ptr [rcx+21],00
"ACS.exe"+20AAA4: 74 06                    -  je ACS.exe+20AAAC
"ACS.exe"+20AAA6: 48 8B 51 10              -  mov rdx,[rcx+10]
"ACS.exe"+20AAAA: EB 07                    -  jmp ACS.exe+20AAB3
// ---------- INJECTING HERE ----------
"ACS.exe"+20AAAC: 48 8B 41 18              -  mov rax,[rcx+18]
"ACS.exe"+20AAB0: 48 8B 10                 -  mov rdx,[rax]
// ---------- DONE INJECTING  ----------
"ACS.exe"+20AAB3: 48 8B 41 08              -  mov rax,[rcx+08]
"ACS.exe"+20AAB7: 48 3B C2                 -  cmp rax,rdx
"ACS.exe"+20AABA: 73 04                    -  jae ACS.exe+20AAC0
"ACS.exe"+20AABC: 33 C0                    -  xor eax,eax
"ACS.exe"+20AABE: EB 03                    -  jmp ACS.exe+20AAC3
"ACS.exe"+20AAC0: 48 2B C2                 -  sub rax,rdx
"ACS.exe"+20AAC3: F3 0F 10 15 15 F9 90 02  -  movss xmm2,[ACS.exe+2B1A3E0]
"ACS.exe"+20AACB: 0F 57 C0                 -  xorps xmm0,xmm0
"ACS.exe"+20AACE: F3 48 0F 2A C0           -  cvtsi2ss xmm0,rax
"ACS.exe"+20AAD3: 48 85 C0                 -  test rax,rax
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>14537</ID>
                      <Description>"(you can also increment 'Remaining time' ~ pause timer first !)"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14538</ID>
                      <Description>"Pause timer (1 = Pause / 0 = Continue)"</Description>
                      <LastState Value="0" RealAddress="1836202E0"/>
                      <VariableType>Byte</VariableType>
                      <Address>bChronoTimer</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14539</ID>
                      <Description>"Remaining time"</Description>
                      <LastState Value="0" RealAddress="1836202C0"/>
                      <Color>000000</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>IntChronoDiffer</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14546</ID>
                      <Description>"Remaining time (secs)"</Description>
                      <LastState Value="0" RealAddress="1836202D0"/>
                      <Color>808080</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>IntChronoSecs</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14540</ID>
                      <Description>"Start-time (incrementing)"</Description>
                      <Color>808080</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pChronoTimer</Address>
                      <Offsets>
                        <Offset>0</Offset>
                        <Offset>18</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14541</ID>
                      <Description>"End-time"</Description>
                      <Color>808080</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>[pChronoTimer]+8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14543</ID>
                      <Description>"Max Time limit (secs)"</Description>
                      <Color>808080</Color>
                      <VariableType>Float</VariableType>
                      <Address>[pChronoTimer]+30</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14643</ID>
                      <Description>"Remaining time (secs)"</Description>
                      <Color>808080</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>[pChronoTimer]+34</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14544</ID>
                      <Description>"Reset (system flag  ~ 0=Reset/1)"</Description>
                      <Color>808080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>[pChronoTimer]+20</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14545</ID>
                      <Description>"(Chrono) - Base"</Description>
                      <LastState Value="0000000000000000" RealAddress="1836202B0"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>C0C0C0</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pChronoTimer</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4</ID>
              <Description>"Level Up..."</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : ACS.exe
  Version: 
  Date   : 2020-06-13
  Author : Paul44

  Allows you to edit player's current Level...
}

[ENABLE]
// static struct = MainSkillProgression
// level: +10
aobscanmodule(LevelUp,$process,8B 40 10 C3 CC CC CC CC CC B8)
registersymbol(LevelUp)
alloc(newmem,$100,$process)

label(code)
label(return)

newmem:
  mov [pLevelUp],rax
code:
  mov eax,[rax+10]
  ret 
  int 3 
  jmp return

LevelUp:
  jmp newmem
return:
registersymbol(LevelUp)

[DISABLE]

LevelUp:
  db 8B 40 10 C3 CC

unregistersymbol(LevelUp)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+A84A57

"ACS.exe"+A84A47: CC                                -  int 3 
"ACS.exe"+A84A48: CC                                -  int 3 
"ACS.exe"+A84A49: CC                                -  int 3 
"ACS.exe"+A84A4A: CC                                -  int 3 
"ACS.exe"+A84A4B: CC                                -  int 3 
"ACS.exe"+A84A4C: CC                                -  int 3 
"ACS.exe"+A84A4D: CC                                -  int 3 
"ACS.exe"+A84A4E: CC                                -  int 3 
"ACS.exe"+A84A4F: CC                                -  int 3 
"ACS.exe"+A84A50: 48 8B 81 50 06 00 00              -  mov rax,[rcx+00000650]
// ---------- INJECTING HERE ----------
"ACS.exe"+A84A57: 8B 40 10                          -  mov eax,[rax+10]
"ACS.exe"+A84A5A: C3                                -  ret 
"ACS.exe"+A84A5B: CC                                -  int 3 
// ---------- DONE INJECTING  ----------
"ACS.exe"+A84A5C: CC                                -  int 3 
"ACS.exe"+A84A5D: CC                                -  int 3 
"ACS.exe"+A84A5E: CC                                -  int 3 
"ACS.exe"+A84A5F: CC                                -  int 3 
"ACS.exe"+A84A60: B8 C0 91 DD DA                    -  mov eax,DADD91C0
"ACS.exe"+A84A65: C3                                -  ret 
"ACS.exe"+A84A66: CC                                -  int 3 
"ACS.exe"+A84A67: CC                                -  int 3 
"ACS.exe"+A84A68: CC                                -  int 3 
"ACS.exe"+A84A69: CC                                -  int 3 
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>14305</ID>
                  <Description>"(Level not saved ~ only allows you to craft/edit/wear above Level items)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>FF0000</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>14289</ID>
                  <Description>"Level"</Description>
                  <LastState Value="10" RealAddress="7FF4FD9AA870"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[pLevelUp]+10</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>14290</ID>
                  <Description>"MainSkillProgression - base"</Description>
                  <LastState Value="00007FF4FD9AA860" RealAddress="1836200B0"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>C0C0C0</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>pLevelUp</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>14554</ID>
              <Description>"Time Of Day..."</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : ACS.exe
  Version:
  Date   : 2020-09-24
  Author : Paul44

  Set daytime...
}

[ENABLE]
{$lua}
getStaticAddr("44 8B 41 6C 0F 57 C0",4,"pTimeOfDay",0)

{$asm}
// struct: TimeOfDayManager...
aobscanmodule(DayTimeMgr,$process,48 8B 81 B8 00 00 00 F3 0F 10 40 0C)
registersymbol(DayTimeMgr)
alloc(newmem,$100,$process)

globalalloc(pDayTimeMgr,4,$process)

label(code)
label(return)

newmem:
  mov [pDayTimeMgr],rcx
code:
  mov rax,[rcx+000000B8]
  jmp return

DayTimeMgr:
  jmp newmem
  db 90 90
return:


[DISABLE]

{$asm}

DayTimeMgr:
  db 48 8B 81 B8 00 00 00

unregistersymbol(DayTimeMgr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+1AA98E0

"ACS.exe"+1AA98CC: CC                       -  int 3
"ACS.exe"+1AA98CD: CC                       -  int 3
"ACS.exe"+1AA98CE: CC                       -  int 3
"ACS.exe"+1AA98CF: CC                       -  int 3
"ACS.exe"+1AA98D0: 48 8B 81 50 02 00 00     -  mov rax,[rcx+00000250]
"ACS.exe"+1AA98D7: F3 0F 10 40 2C           -  movss xmm0,[rax+2C]
"ACS.exe"+1AA98DC: C3                       -  ret
"ACS.exe"+1AA98DD: CC                       -  int 3
"ACS.exe"+1AA98DE: CC                       -  int 3
"ACS.exe"+1AA98DF: CC                       -  int 3
// ---------- INJECTING HERE ----------
"ACS.exe"+1AA98E0: 48 8B 81 B8 00 00 00     -  mov rax,[rcx+000000B8]
// ---------- DONE INJECTING  ----------
"ACS.exe"+1AA98E7: F3 0F 10 40 0C           -  movss xmm0,[rax+0C]
"ACS.exe"+1AA98EC: C3                       -  ret
"ACS.exe"+1AA98ED: CC                       -  int 3
"ACS.exe"+1AA98EE: CC                       -  int 3
"ACS.exe"+1AA98EF: CC                       -  int 3
"ACS.exe"+1AA98F0: 8B 81 04 02 00 00        -  mov eax,[rcx+00000204]
"ACS.exe"+1AA98F6: 33 D2                    -  xor edx,edx
"ACS.exe"+1AA98F8: 83 F8 FF                 -  cmp eax,-01
"ACS.exe"+1AA98FB: 0F 45 D0                 -  cmovne edx,eax
"ACS.exe"+1AA98FE: 48 8B 8C D1 70 01 00 00  -  mov rcx,[rcx+rdx*8+00000170]
}

{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+11D7CE8

"ACS.exe"+11D7CD7: CC                       -  int 3
"ACS.exe"+11D7CD8: CC                       -  int 3
"ACS.exe"+11D7CD9: CC                       -  int 3
"ACS.exe"+11D7CDA: CC                       -  int 3
"ACS.exe"+11D7CDB: CC                       -  int 3
"ACS.exe"+11D7CDC: CC                       -  int 3
"ACS.exe"+11D7CDD: CC                       -  int 3
"ACS.exe"+11D7CDE: CC                       -  int 3
"ACS.exe"+11D7CDF: CC                       -  int 3
"ACS.exe"+11D7CE0: F3 0F 10 0D D4 6E F8 05  -  movss xmm1,[ACS.exe+715EBBC]
// ---------- INJECTING HERE ----------
"ACS.exe"+11D7CE8: 44 8B 41 6C              -  mov r8d,[rcx+6C]
"ACS.exe"+11D7CEC: 0F 57 C0                 -  xorps xmm0,xmm0
// ---------- DONE INJECTING  ----------
"ACS.exe"+11D7CEF: F3 48 0F 2C D1           -  cvttss2si rdx,xmm1
"ACS.exe"+11D7CF4: C6 41 31 00              -  mov byte ptr [rcx+31],00
"ACS.exe"+11D7CF8: 8B C2                    -  mov eax,edx
"ACS.exe"+11D7CFA: F3 48 0F 2A C0           -  cvtsi2ss xmm0,rax
"ACS.exe"+11D7CFF: F3 0F 5C C8              -  subss xmm1,xmm0
"ACS.exe"+11D7D03: F3 0F 59 0D 25 FA 94 01  -  mulss xmm1,[ACS.exe+2B27730]
"ACS.exe"+11D7D0B: F3 4C 0F 2C C9           -  cvttss2si r9,xmm1
"ACS.exe"+11D7D10: 45 85 C0                 -  test r8d,r8d
"ACS.exe"+11D7D13: 74 38                    -  je ACS.exe+11D7D4D
"ACS.exe"+11D7D15: 41 FF C8                 -  dec r8d
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>14555</ID>
                  <Description>"Set hour (0~24 hr)"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="23,0877037" RealAddress="14715EBBC"/>
                  <VariableType>Float</VariableType>
                  <Address>[pTimeOfDay]</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>14612</ID>
                      <Description>"Pause time (0/1)"</Description>
                      <LastState Value="0" RealAddress="14715EBD1"/>
                      <Color>808080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>pDayTimeMgr</Address>
                      <Offsets>
                        <Offset>21</Offset>
                        <Offset>B8</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>14353</ID>
                  <Description>"Pause time (0/1)"</Description>
                  <LastState Value="1" RealAddress="B0D8F540"/>
                  <Color>808080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>[pDayTimeMgr]+B0</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>14613</ID>
                  <Description>"TimeOfDayManager - Base"</Description>
                  <LastState Value="00000000B0D8F490" RealAddress="1836202A0"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>808080</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>pDayTimeMgr</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>14039</ID>
              <Description>"Tools... (London + DLCs)"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : ACU.exe
  Version: 
  Date   : 2020-06-03
  Author : Paul44

  Builds/prints Icon lists...
}

[ENABLE]
// Gets ptr to IconList of Chests, Cockades, etc...
// PermanentIconManager... +34
aobscanmodule(IconList,$process,89 8C 24 B8 00 00 00 45 8D)
registersymbol(IconList)
alloc(newmem,$100,$process)

globalalloc(pIconList,8,$process)
globalalloc(pIconBChoice,1,$process)
globalalloc(pIconLChoice,1,$process)


pIconBChoice:
db 0

pIconLChoice:
db 0


label(code)
label(return)

newmem:
  // [rax+counter_offset]+0x08 = record Icon...
  push rax
  mov rax,[rsi+34]
  mov [pIconList],rax
  pop rax
code:
  mov [rsp+000000B8],ecx
  jmp return

IconList:
  jmp newmem
  db 90 90
return:


[DISABLE]

IconList:
  db 89 8C 24 B8 00 00 00

unregistersymbol(IconList)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ACS.exe"+D77F15

"ACS.exe"+D77EE4: 48 8D 0D 9D B4 36 06     -  lea rcx,[ACS.exe+70E3388]
"ACS.exe"+D77EEB: 4C 89 78 C0              -  mov [rax-40],r15
"ACS.exe"+D77EEF: E8 2C A4 EF 00           -  call ACS.exe+1C72320
"ACS.exe"+D77EF4: E8 17 07 D1 00           -  call ACS.exe+1A88610
"ACS.exe"+D77EF9: 0F B7 56 3E              -  movzx edx,word ptr [rsi+3E]
"ACS.exe"+D77EFD: 44 8B B6 E0 00 00 00     -  mov r14d,[rsi+000000E0]
"ACS.exe"+D77F04: B9 14 00 00 00           -  mov ecx,00000014
"ACS.exe"+D77F09: 88 84 24 B0 00 00 00     -  mov [rsp+000000B0],al
"ACS.exe"+D77F10: 3B D1                    -  cmp edx,ecx
"ACS.exe"+D77F12: 0F 46 CA                 -  cmovbe ecx,edx
// ---------- INJECTING HERE ----------
"ACS.exe"+D77F15: 89 8C 24 B8 00 00 00     -  mov [rsp+000000B8],ecx
// ---------- DONE INJECTING  ----------
"ACS.exe"+D77F1C: 45 8D 2C 0E              -  lea r13d,[r14+rcx]
"ACS.exe"+D77F20: 45 3B F5                 -  cmp r14d,r13d
"ACS.exe"+D77F23: 0F 83 C3 01 00 00        -  jae ACS.exe+D780EC
"ACS.exe"+D77F29: 0F 1F 80 00 00 00 00     -  nop dword ptr [rax+00000000]
"ACS.exe"+D77F30: 0F B7 46 3E              -  movzx eax,word ptr [rsi+3E]
"ACS.exe"+D77F34: 66 85 C0                 -  test ax,ax
"ACS.exe"+D77F37: 0F 84 A8 01 00 00        -  je ACS.exe+D780E5
"ACS.exe"+D77F3D: 0F B7 C8                 -  movzx ecx,ax
"ACS.exe"+D77F40: 33 D2                    -  xor edx,edx
"ACS.exe"+D77F42: 41 8B C6                 -  mov eax,r14d

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>14050</ID>
                  <Description>"(Always make a backup of your game saves first !)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>0000FF</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>14047</ID>
                  <Description>"(it can take some time to run the scripts... - &lt;1min)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>FF0000</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>13987</ID>
                  <Description>"Build Icon List..."</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : ACU.exe
  Version: 
  Date   : 2020-05-29
  Author : Paul44

  Gets mapicon marker...   (seems to produce less ptrs)
}

[ENABLE]
//  UIMinimapManager... +58: list of icons...
// aobscanmodule(INJECT,ACU.exe,4C 8D 4C 24 78 4C 8B C6 48 8B CB)

{$lua}

  local nChoice = readBytes(getAddress("pIconBChoice"))
  if (nChoice == 1) then
    -- clears Lua Engine window
    GetLuaEngine().MenuItem5.doClick()

    local addrCheckPtr = readPointer(getAddress("pUIMapCheck1"))
    local addrUIicon = readPointer(getAddress("[pUIMinimapMgr]")+0x60)
    local bContinue = true
    local nCount = 0
    print(string.format('UIMinimapManager: {%X+%X}',getAddress("[pUIMinimapMgr]"),0x60))
    print(' #   addrIcon+offs    Type         X                      Y                      Z              (* = Enabled)')

    while (bContinue)
      do
        local addrIcon = readPointer(addrUIicon+nCount*8)
        local addrCheck =  readPointer(addrIcon)
        if (addrCheck ~= addrCheckPtr) then
            bContinue = false
            break
        end
        --write(string.format('(%d)',nCount))
        if (readSmallInteger(addrIcon+0x12) == 0x8000) then
          local addrInfo = readPointer(addrIcon+0x18)                -- UIMinimapManager
          local bShown = ""
          if (readQword(addrInfo) ~= 0) then
            local iconCat = readInteger(addrInfo+0x14)
            if (readInteger(addrIcon+0xB0) ~= 0) then bShown = "(*)" end   --- ???
            -- get Entity record ~ +D4: ID = 0 !
            addrInfo = readPointer(addrInfo)
            local coordX = readFloat(addrInfo+0x60)
            local coordY = readFloat(addrInfo+0x64)
            local coordZ = readFloat(addrInfo+0x68)
            print(string.format('(%d) {%X+%X} - %d:  [ %f  ~  %f  ~  %f ]   %s',nCount,addrIcon,nCount*8,iconCat,coordX,coordY,coordZ,bShown))
            --break
          end
        end
        nCount = nCount + 1
      end
    print('\n =&gt; Just close window when no longer needed...')
  end

{$asm}

test al,al
//dd (int)48

pIconBChoice:
db 0


[DISABLE]

{
// ORIGINAL CODE - INJECTION POINT: "ACU.exe"+8549A5

"ACU.exe"+854972: 48 89 44 24 78           -  mov [rsp+78],rax
"ACU.exe"+854977: F0 FF 40 08              - lock  inc [rax+08]
"ACU.exe"+85497B: 48 8B 94 24 80 00 00 00  -  mov rdx,[rsp+00000080]
"ACU.exe"+854983: F0 FF 4A 08              - lock  dec [rdx+08]
"ACU.exe"+854987: 75 15                    -  jne ACU.exe+85499E
"ACU.exe"+854989: F7 42 0C FF FF FF 00     -  test [rdx+0C],00FFFFFF
"ACU.exe"+854990: 75 0C                    -  jne ACU.exe+85499E
"ACU.exe"+854992: 48 8D 0D D7 71 A0 04     -  lea rcx,[ACU.exe+525BB70]
"ACU.exe"+854999: E8 42 7F E9 01           -  call ACU.exe+26EC8E0
"ACU.exe"+85499E: 48 8B 15 CB 2D 94 04     -  mov rdx,[ACU.exe+5197770]
// ---------- INJECTING HERE ----------
"ACU.exe"+8549A5: 4C 8D 4C 24 78           -  lea r9,[rsp+78]
// ---------- DONE INJECTING  ----------
"ACU.exe"+8549AA: 4C 8B C6                 -  mov r8,rsi
"ACU.exe"+8549AD: 48 8B CB                 -  mov rcx,rbx
"ACU.exe"+8549B0: E8 FB 43 01 00           -  call ACU.exe+868DB0
"ACU.exe"+8549B5: 48 8B F0                 -  mov rsi,rax
"ACU.exe"+8549B8: 48 85 C0                 -  test rax,rax
"ACU.exe"+8549BB: 0F 84 80 00 00 00        -  je ACU.exe+854A41
"ACU.exe"+8549C1: E8 6A 3C 9B 01           -  call ACU.exe+2208630
"ACU.exe"+8549C6: 48 8B CE                 -  mov rcx,rsi
"ACU.exe"+8549C9: 48 8B D0                 -  mov rdx,rax
"ACU.exe"+8549CC: E8 2F C0 47 01           -  call ACU.exe+1CD0A00
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>14049</ID>
                      <Description>"Allow to run:"</Description>
                      <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Disabled
1:Enabled
</DropDownList>
                      <LastState Value="0" RealAddress="183620280"/>
                      <Color>FF00FF</Color>
                      <VariableType>Byte</VariableType>
                      <Address>pIconBChoice</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14043</ID>
                      <Description>"UIMinimapManager"</Description>
                      <LastState Value="0000000056059900" RealAddress="183620060"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>C0C0C0</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pUIMinimapMgr</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>14045</ID>
                  <Description>"Show Icons..."</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : ACU.exe
  Version: 
  Date   : 2020-05-29
  Author : Paul44

  Gets mapicon marker...   (seems to produce less ptrs)
}

[ENABLE]

{$lua}

  local bContinue = true
  local nCount = 0
  local nOffset = 0
  local addrIconList = 0
  local nChoice = readBytes(getAddress("pIconLChoice"))

  if (nChoice &gt; 0 and nChoice &lt; 15 and nChoice ~= 5) then
      -- clears Lua Engine window
      GetLuaEngine().MenuItem5.doClick()

      addrIconList = readPointer(getAddress("pIconList"))
      print(string.format('Start address Icon List: {%X}',addrIconList))
      print(' #     addrIcon + offs      Category         X                        Y                     Z                Shown Opened Collected')
  else
      bContinue = false
  end

  while (bContinue)
    do
      local bProcess = false
      local bShowUpdate = false

      local addrIcon = readPointer(addrIconList+nOffset*8)
      local checkRec = readPointer(addrIcon)
      --print(string.format('(%d) - {%X+%X}',nCount+1,addrIcon,nOffset*8))
      if (checkRec == 0 or checkRec == nil) then break end

      addrIcon = readPointer(addrIcon+0x08)
      bMapShow = readBytes(addrIcon+0x51)
      bChestOpen = readBytes(addrIcon+0x50)
      bItemCollected = readBytes(addrIcon+0x74)

      --if (bProcess) then
        local coordX = readFloat(addrIcon+0x20)
        local coordY = readFloat(addrIcon+0x24)
        local coordZ = readFloat(addrIcon+0x28)

        local catVal1 = 0
        local catVal2 = 0
        local addrCat = addrIcon+0x60
        --local addrCat = addrIcon+0x68
        addrCat = readPointer(addrCat)
        if not (addrCat == 0 or addrCat == nil) then
          addrCat = readPointer(addrCat)
          if not (addrCat == 0 or addrCat == nil) then
              catVal1 = readBytes(addrCat+0x28)
              catVal2 = readBytes(addrCat+0x2C)
          end
        end

        if (nChoice == 1) then bProcess = true end
        if (nChoice == 2 and bMapShow == 0) then bProcess = true end
        if (nChoice == 3 and bChestOpen == 0 and (catVal2 == 2 or catVal2 == 5)) then bProcess = true end
        if (nChoice == 4 and bItemCollected == 0) then bProcess = true end
        --
        if (nChoice == 6 and catVal2 == 5 and bMapShow == 0) then bShowUpdate = true end
        if (nChoice == 7 and catVal2 == 2 and bMapShow == 0) then bShowUpdate = true end
        if (nChoice == 8 and catVal2 == 1 and bMapShow == 0) then bShowUpdate = true end
        if (nChoice == 9 and catVal2 == 6 and bMapShow == 0) then bShowUpdate = true end
        if (nChoice == 10 and catVal2 == 7 and bMapShow == 0) then bShowUpdate = true end
        if (nChoice == 11 and catVal2 == 13 and bMapShow == 0) then bShowUpdate = true end
        if (nChoice == 12 and catVal2 == 14 and bMapShow == 0) then bShowUpdate = true end
        if (nChoice == 13 and catVal2 == 18 and bMapShow == 0) then bShowUpdate = true end
        if (nChoice == 14 and catVal2 == 9 and bMapShow == 0) then bShowUpdate = true end

        if (bShowUpdate) then
           writeBytes(addrIcon+0x51,1)
        end

        if (bProcess or bShowUpdate) then
          print(string.format('(%d) {%X+%X} + %d/%d:  [ %f  ~  %f  ~  %f ]       [%d    -    %d    -    %d]',
              nCount+1,addrIcon,nOffset*8,catVal1,catVal2,coordX,coordY,coordZ,bMapShow,bChestOpen,bItemCollected))
          nCount = nCount +1
        end
      --end
--break
      nOffset = nOffset + 1
    end
  if (nChoice &gt; 0 and nChoice &lt; 9) then
      print('\n =&gt; Just close window when no longer needed...')
  end

{$asm}

test al,al
//dd (int)48

pIconLChoice:
db 0


[DISABLE]

{
// ORIGINAL CODE - INJECTION POINT: "ACU.exe"+8549A5

"ACU.exe"+854972: 48 89 44 24 78           -  mov [rsp+78],rax
"ACU.exe"+854977: F0 FF 40 08              - lock  inc [rax+08]
"ACU.exe"+85497B: 48 8B 94 24 80 00 00 00  -  mov rdx,[rsp+00000080]
"ACU.exe"+854983: F0 FF 4A 08              - lock  dec [rdx+08]
"ACU.exe"+854987: 75 15                    -  jne ACU.exe+85499E
"ACU.exe"+854989: F7 42 0C FF FF FF 00     -  test [rdx+0C],00FFFFFF
"ACU.exe"+854990: 75 0C                    -  jne ACU.exe+85499E
"ACU.exe"+854992: 48 8D 0D D7 71 A0 04     -  lea rcx,[ACU.exe+525BB70]
"ACU.exe"+854999: E8 42 7F E9 01           -  call ACU.exe+26EC8E0
"ACU.exe"+85499E: 48 8B 15 CB 2D 94 04     -  mov rdx,[ACU.exe+5197770]
// ---------- INJECTING HERE ----------
"ACU.exe"+8549A5: 4C 8D 4C 24 78           -  lea r9,[rsp+78]
// ---------- DONE INJECTING  ----------
"ACU.exe"+8549AA: 4C 8B C6                 -  mov r8,rsi
"ACU.exe"+8549AD: 48 8B CB                 -  mov rcx,rbx
"ACU.exe"+8549B0: E8 FB 43 01 00           -  call ACU.exe+868DB0
"ACU.exe"+8549B5: 48 8B F0                 -  mov rsi,rax
"ACU.exe"+8549B8: 48 85 C0                 -  test rax,rax
"ACU.exe"+8549BB: 0F 84 80 00 00 00        -  je ACU.exe+854A41
"ACU.exe"+8549C1: E8 6A 3C 9B 01           -  call ACU.exe+2208630
"ACU.exe"+8549C6: 48 8B CE                 -  mov rcx,rsi
"ACU.exe"+8549C9: 48 8B D0                 -  mov rdx,rax
"ACU.exe"+8549CC: E8 2F C0 47 01           -  call ACU.exe+1CD0A00
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>14048</ID>
                      <Description>"Do following:"</Description>
                      <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:&lt;Make your choice&gt;
1:1. List full icon overview
2:2. List icons not shown on map yet
3:3. List chests not opened yet
4:4. List items not collected yet
5:---
6:A. Show White Chests on map now
7:B. Show Golden Chests on map now
8:C. Show Beer Bottles on map now
9:D. Show Pressed Flowers on map now
10:E. Show Illustrations on map now
11:F. Show Royal Correspondences on map now
12:G. Show Secrets of London on map now
13:H. Show Helix glitch on map now
14:I. Show Letters f/t Front on map now
</DropDownList>
                      <LastState Value="0" RealAddress="183620290"/>
                      <Color>FF00FF</Color>
                      <VariableType>Byte</VariableType>
                      <Address>pIconLChoice</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14042</ID>
                      <Description>"(Base Icon List)"</Description>
                      <LastState Value="00000000E756EF50" RealAddress="183620270"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>C0C0C0</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>pIconList</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>14671</ID>
              <Description>"Perks..."</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : ACS_Steam.exe
  Version: 
  Date   : 2020-10-25
  Author : Paul44

  Get list of all perks...
}

[ENABLE]
// struct: AccomplishmentManager...
{$lua}
getStaticAddr("33 DB 41 0F B6 F0",4,"pAccomplishm",2)

local addrAccompl = readPointer(getAddress("pAccomplishm"))
local pVFT = readPointer(readPointer(readPointer(addrAccompl+0x30)))
pVFT = readPointer(pVFT)

local addrAccVFT = getAddress("pAccomplVFT")
writeQword(addrAccVFT,pVFT)
{$asm}

globalalloc(pAddrPerk,8,$process)
globalalloc(pPerkBChoice,1,$process)

pAddrPerk:
dq 0

pPerkBChoice:
db 0

[DISABLE]


{
// ORIGINAL CODE - INJECTION POINT: "ACS_Steam.exe"+17A1A6B

"ACS_Steam.exe"+17A1A49: 48 83 C4 20           -  add rsp,20
"ACS_Steam.exe"+17A1A4D: 5F                    -  pop rdi
"ACS_Steam.exe"+17A1A4E: C3                    -  ret 
"ACS_Steam.exe"+17A1A4F: CC                    -  int 3 
"ACS_Steam.exe"+17A1A50: 48 89 5C 24 08        -  mov [rsp+08],rbx
"ACS_Steam.exe"+17A1A55: 48 89 6C 24 10        -  mov [rsp+10],rbp
"ACS_Steam.exe"+17A1A5A: 48 89 74 24 18        -  mov [rsp+18],rsi
"ACS_Steam.exe"+17A1A5F: 57                    -  push rdi
"ACS_Steam.exe"+17A1A60: 48 83 EC 20           -  sub rsp,20
"ACS_Steam.exe"+17A1A64: 48 8B 05 35 BB 9A 05  -  mov rax,[ACS_Steam.exe+714D5A0]
// ---------- INJECTING HERE ----------
"ACS_Steam.exe"+17A1A6B: 33 DB                 -  xor ebx,ebx
"ACS_Steam.exe"+17A1A6D: 41 0F B6 F0           -  movzx esi,r8l
// ---------- DONE INJECTING  ----------
"ACS_Steam.exe"+17A1A71: 0F B6 EA              -  movzx ebp,dl
"ACS_Steam.exe"+17A1A74: 48 8B F9              -  mov rdi,rcx
"ACS_Steam.exe"+17A1A77: 48 85 C0              -  test rax,rax
"ACS_Steam.exe"+17A1A7A: 75 16                 -  jne ACS_Steam.exe+17A1A92
"ACS_Steam.exe"+17A1A7C: BA 45 05 21 79        -  mov edx,79210545
"ACS_Steam.exe"+17A1A81: B9 C2 0B 00 00        -  mov ecx,00000BC2
"ACS_Steam.exe"+17A1A86: E8 95 70 4A 00        -  call ACS_Steam.exe+1C48B20
"ACS_Steam.exe"+17A1A8B: 48 89 05 0E BB 9A 05  -  mov [ACS_Steam.exe+714D5A0],rax
"ACS_Steam.exe"+17A1A92: 38 58 50              -  cmp [rax+50],bl
"ACS_Steam.exe"+17A1A95: 74 3C                 -  je ACS_Steam.exe+17A1AD3
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>14694</ID>
                  <Description>"(it can take several seconds to collect the values...)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>FF0000</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>14689</ID>
                  <Description>"Allow to run:"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Disabled
1:Enabled
</DropDownList>
                  <LastState Value="0" RealAddress="183620260"/>
                  <Color>FF00FF</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pPerkBChoice</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>14688</ID>
                  <Description>"Build Perks List..."</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : ACU.exe
  Version: 
  Date   : 2020-05-29
  Author : Paul44

  Gets list of Perks...
}

[ENABLE]

{$lua}

  local nChoice = readBytes(getAddress("pPerkBChoice"),1)
  if (nChoice ~= 1) then return end

  -- clears Lua Engine window
  GetLuaEngine().MenuItem5.doClick()
  -- need for loop to get info print-ed...
  print('\n One moment, please... processing...')
  for i=0,2 do print('\n') end

  local addrCheckPtr = readPointer(getAddress("pAccomplVFT"))
  sAOB = string.format('%X',addrCheckPtr)
  --print(sAOB)

  local scan = createMemScan(false)
  --scan.setOnlyOneResult(false)
  scan.firstScan(soExactValue,vtQword,rtRounded,sAOB,nil,0,0xffffffffffffffff,"-X-C+W",
                                      fsmNotAligned,nil,true,false,false,false)

  scan.waitTillDone()
  --scan.getOnlyResult()
  --print(string.format('- %X -',scan.Result))
  local scanList = createFoundList(scan)
  scanList.initialize()
  --print(scanList.Count)

  -- clears Lua Engine window
  GetLuaEngine().MenuItem5.doClick()

  print(string.format('AccomplishmentManager: {%X +%X}',getAddress("[pAccomplishm]"),0x30))
  print('  #     addrPerk  \t | \t Actual \t Total')

  for i=0,scanList.Count-1 do

      local addrPerk = tonumber(scanList.Address[i],16)
      local nActual = readInteger(addrPerk+0x70)
      local nTotal =  readInteger(addrPerk+0x74)

      print(string.format('[%03d]: {%08X} \t | \t (%d  \t %d)',i+1,addrPerk,nActual,nTotal))

  --break
  end

  print('\n =&gt; Just close window when no longer needed...')


{$asm}

test al,al
//dd (int)48

pPerkBChoice:
db 0


[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>14690</ID>
                  <Description>"Address Perk"</Description>
                  <LastState Value="0000000000000000" RealAddress="183620250"/>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>8 Bytes</VariableType>
                  <Address>pAddrPerk</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>14692</ID>
                      <Description>"Actual"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>[pAddrPerk]+70</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14696</ID>
                      <Description>"Completed (= 0 &lt;~ 1)"</Description>
                      <VariableType>Byte</VariableType>
                      <Address>[pAddrPerk]+8A</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14691</ID>
                      <Description>"Total"</Description>
                      <Color>808080</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>[pAddrPerk]+74</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14695</ID>
                      <Description>"Completed (= 3 &lt;~ 1)"</Description>
                      <Color>808080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>[pAddrPerk]+1C</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>13868</ID>
              <Description>"CameraManager - Base"</Description>
              <LastState Value="00000000558F3C20" RealAddress="183620000"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>C0C0C0</Color>
              <VariableType>8 Bytes</VariableType>
              <Address>pCameraMgr</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1419</ID>
      <Description>"Error Statistics"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1420</ID>
          <Description>"&gt; Enable Cheats..."</Description>
          <LastState Value="0" RealAddress="1836200F0"/>
          <VariableType>4 Bytes</VariableType>
          <Address>nCrash1</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>1481</ID>
          <Description>"&gt; Teleport &amp; Coordinates"</Description>
          <LastState Value="0" RealAddress="183620100"/>
          <VariableType>4 Bytes</VariableType>
          <Address>nCrash2</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>1449</ID>
          <Description>"&gt; Teleport to Waypoint..."</Description>
          <LastState Value="0" RealAddress="183620110"/>
          <VariableType>4 Bytes</VariableType>
          <Address>nCrash3</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>14287</ID>
          <Description>"&gt; Inventory..."</Description>
          <LastState Value="0" RealAddress="183620120"/>
          <VariableType>4 Bytes</VariableType>
          <Address>nCrash4</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>14780</ID>
      <Description>"Cheat table settings..."</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

//globalalloc(setCompactView,1,$process)
//globalalloc(setBrowser,1,$process)


[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>14828</ID>
          <Description>"(fill in your choices ini the 'Description' field)"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>FF0080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>14826</ID>
          <Description>"(sets 'Compact View Mode' at startup: Compact (default) = 1 ~ Full View = 0)"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>FF0000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>14831</ID>
              <Description>"1"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>14825</ID>
          <Description>"(launches this browser from 'Info' button - fill in your browser, without extension)"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>FF0000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>14830</ID>
              <Description>"iexplore"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>14832</ID>
          <Description>"(sets background color - default = 0xEDEEF6)"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>FF0000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>14833</ID>
              <Description>"0xEDEEF6"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>14829</ID>
          <Description>"(you must save/reload the table to apply these settings permanently !)"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>0000FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pCameraMgr</Name>
      <Address>183620000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pEntity</Name>
      <Address>183620010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pBhvAssassin</Name>
      <Address>183620020</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pHealth</Name>
      <Address>183620030</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pInventory</Name>
      <Address>183620040</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pInventCheck</Name>
      <Address>183620050</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pUIMinimapMgr</Name>
      <Address>183620060</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pGameProtect1</Name>
      <Address>183620070</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pGameProtect2</Name>
      <Address>183620080</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bKillAntiDebug</Name>
      <Address>183620090</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pUIMapCheck1</Name>
      <Address>1836200A0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pLevelUp</Name>
      <Address>1836200B0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pFloat</Name>
      <Address>1836200C0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bGodmode</Name>
      <Address>1836200D0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInvisible</Name>
      <Address>1836200E0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>nCrash1</Name>
      <Address>1836200F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>nCrash2</Name>
      <Address>183620100</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>nCrash3</Name>
      <Address>183620110</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>nCrash4</Name>
      <Address>183620120</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pStructCrdBase</Name>
      <Address>183620130</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pStructCrdOffset</Name>
      <Address>183620140</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tInventory</Name>
      <Address>183620150</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pTimeOfDay</Name>
      <Address>183620220</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAccomplishm</Name>
      <Address>183620230</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAccomplVFT</Name>
      <Address>183620240</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAddrPerk</Name>
      <Address>183620250</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pPerkBChoice</Name>
      <Address>183620260</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pIconList</Name>
      <Address>183620270</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pIconBChoice</Name>
      <Address>183620280</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pIconLChoice</Name>
      <Address>183620290</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pDayTimeMgr</Name>
      <Address>1836202A0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pChronoTimer</Name>
      <Address>1836202B0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>IntChronoDiffer</Name>
      <Address>1836202C0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>IntChronoSecs</Name>
      <Address>1836202D0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bChronoTimer</Name>
      <Address>1836202E0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>intDiv</Name>
      <Address>1836202F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMissionTimer2</Name>
      <Address>183620300</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>IntTimerDiffer2</Name>
      <Address>183620310</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bMissionTimer2</Name>
      <Address>183620320</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMissionTimer</Name>
      <Address>183620330</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>IntTimerDiffer</Name>
      <Address>183620340</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bMissionTimer</Name>
      <Address>183620350</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMapWayp</Name>
      <Address>183620360</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>nDropHeight</Name>
      <Address>183620370</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bDropHigh</Name>
      <Address>183620380</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AddrListID</Name>
      <Address>183620390</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>OrigCoord</Name>
      <Address>1836203A0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>XYstepVal</Name>
      <Address>1836203B0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ZstepVal</Name>
      <Address>1836203C0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ZstepdropHeight</Name>
      <Address>1836203D0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Xval</Name>
      <Address>1836203E0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Yval</Name>
      <Address>1836203F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Zval</Name>
      <Address>183620400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInit</Name>
      <Address>183620410</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInit2</Name>
      <Address>183620420</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bFreeRoam</Name>
      <Address>183620430</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pFreeCam</Name>
      <Address>183620440</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FOVCam</Name>
      <Address>183620450</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>-- You must accept to execute
-- the script !
-- If not, the CE table
-- will return errors...


-- will auto-attach the game; even when table is loaded first...
-- place this at start/common part of lua script
-- will run ONLY once when CE table is loaded
-- when changing process, you must reload table or function !
local myGame = "ACS.exe"
local aalist=getAutoAttachList()
stringlist_add(aalist,myGame)



-- general settings:
local al = getAddressList()
local mForm = getMainForm()
-- set to '0' if you want default CE GUI...
local bDefaultCompactGui = al.getMemoryRecordByID(14831).Description
bDefaultCompactGui = tonumber(bDefaultCompactGui)
if (bDefaultCompactGui ~= 0 and bDefaultCompactGui ~= 1) then bDefaultCompactGui = 1 end
-- set background color ~ 0xEDEEF6
local hColor = al.getMemoryRecordByID(14833).Description
-- set minimum size CE form...
mForm.Constraints.MinWidth = 510
mForm.Constraints.MinHeight = 300
-- add some color...
al.List.BackgroundColor = hColor
al.Header.Color = hColor
-- define your default browser...
--local mr = al.getMemoryRecordByID(14654)
local sBrowser = al.getMemoryRecordByID(14830).Description .. '.exe'
local sSearch = [[ ? fearless rev Assassin Creed 7 Syndicate ~ v1.5.1 &gt;nul 2&gt;nul]]


-- adds a Compact GUI...
-- google: "cheat engine CE compact mode" &amp; "Add menuItem for Main CE Form (hide/show some control)"
local sCheckMark = ' ✓'
function cycleFullCompact()
   local state = not(compactmenuitem.Caption == 'Compact View Mode')
   compactmenuitem.Caption = state and 'Compact View Mode' or 'Compact View Mode'..sCheckMark
   mForm.Splitter1.Visible = state
   --getMainForm().Panel1.Visible    = state
   mForm.Panel2.Visible    = state
   --getMainForm().Panel3.Visible    = state
   mForm.Panel4.Visible    = state
   mForm.Panel5.Visible    = state
   --getMainForm().Panel6.Visible    = state
   --getMainForm().Panel7.Visible    = state           -- seems to cause "incorrect gui"
   --getMainForm().Panel8.Visible    = state
   --getMainForm().Panel9.Visible    = state
   --getMainForm().Panel10.Visible   = state
   --getMainForm().Panel14.Visible   = state

   -- incorrect color gives black background...!
   if state then al.List.BackgroundColor = '0xFFFFFF' else al.List.BackgroundColor = hColor end
end

function addMenuItem()
   if itemMenusalreadyexists then return end
   local parent = mForm.Menu.Items
   compactmenuitem = createMenuItem(parent)
   parent.add(compactmenuitem)
   compactmenuitem.Caption = 'Compact View Mode'
   compactmenuitem.OnClick = cycleFullCompact

   itemMenusalreadyexists = 'yes'
end

addMenuItem()
if (bDefaultCompactGui == 1) then cycleFullCompact() end


-- adding image footer to gui...
-- google: "cheat engine Adding a background picture"
local sImgName = 'FearlessRev_Footer.png'

function attachBackground(wc,tblFile)
   local p = createPicture()
   p.loadFromStream(findTableFile(tblFile).Stream)
   wc.OnPaint = function(sender)
     local c = sender.getCanvas()
     local bitmap = p.getBitmap()
     local width = wc.width
     -- centering image...
     width = (width /2) - (bitmap.Width /2) -- image width
     c.draw(width,0,bitmap)
   end
end

local MPanelImg = createPanel(al)
function addImgFooter(tblFile)
   if ImgFooter then return end
   local p = createPicture()
   p.loadFromStream(findTableFile(tblFile).Stream)
   local bitmap = p.getBitmap()
   MPanelImg.width,MPanelImg.top,MPanelImg.left = 10,0,10
   -- get panel height based on img_height...
   MPanelImg.Height = bitmap.Height + 2
   MPanelImg.Align = alBottom
   MPanelImg.Caption = 'FearlessRevolution'
   ImgFooter = 'yes'
   -- additional settings...
   MPanelImg.Anchors = '[akBottom]'
   MPanelImg.Color = hColor                -- use same color as addresslist
   MPanelImg.setBevelOuter(0)              -- hide surrounding "border"
end

-- google "cheat engine edit box has two properties that do not work"
function addImgButton()
   local btn1 = createButton(MPanelImg)
   btn1.Width = 35
   btn1.Height = 20
   btn1.Top = MPanelImg.Height - btn1.Height - 5
   btn1.Left = 5
   btn1.Caption = 'Info'
   btn1.onClick = bg_Toggle
   btn1.ShowHint = true
   btn1.Hint = "Click this button to open your browser, which will then show you this game\'s topic on FRF..."
end

function bg_Toggle(sender)
    -- do not print error if IE does not exist...
    --getLuaEngine().OnShow = function (sender) return sender.hide(); end

    -- f = assert (io.popen([[start "" ]] ..  sBrowser))
    os.execute([[start "" ]] ..  sBrowser .. sSearch)
    --print(tostring(FileToOpen))
    --getLuaEngine().OnShow = function (sender) return sender.show(); end
end

addImgFooter(sImgName)
attachBackground(MPanelImg,sImgName)
addImgButton()


-- show info in Title bar...
function WinTitleTimer()
    tmer2 = createTimer(nil, false)
    tmer2.OnTimer = UpdateWinTitle
    tmer2.Interval = 3000
    tmer2.Enabled = true
end

function UpdateWinTitle()
    local sGame = process
    if (sGame == nil) then sGame = '&lt;no process selected&gt;' end
    mForm.Caption="Cheat Engine v" .. getCEVersion() .. "  ~  [" .. sGame .. "]"
    if (process ~= nil) then tmer2.destroy() end
end

WinTitleTimer()



-- dis/enable the "hover" functionality via 'Player Coordinates (writes~updates)' script...
-- is called by the ActivateTimer() function
function Hover(tmer)
    -- get XY and Z-axis step value... (default = 100.0 ~ 50.0)
    local addrXYstep = getAddress("XYstepVal")
    local XYstep = readFloat(addrXYstep)
    local addrZstep = getAddress("ZstepVal")
    local Zstep = readFloat(addrZstep)

    -- get x,y,z coordinates...
    local addrX = getAddress("Xval")
    local XValue = readFloat(addrX)
    local addrY = getAddress("Yval")
    local YValue = readFloat(addrY)
    local addrZ = getAddress("Zval")
    local ZValue = readFloat(addrZ)

    -- using NUMpad keys to navigate horizontally...
    -- these keys also allow us to pass through "walls"... (noclip)
    if isKeyPressed(VK_NUMPAD8) then
        --print(string.format("%x",addrX))
        --print(XYstep)
        --print(XValue)
        XValue = XValue + XYstep
        writeFloat(addrX,XValue)
    end
    if (isKeyPressed(VK_NUMPAD2)) then
        XValue = XValue - XYstep
        writeFloat(addrX,XValue)
    end
    local numP4 = VK_NUMPAD4
    local numP6 = VK_NUMPAD6
    if (isKeyPressed(numP4)) then
        YValue = YValue + XYstep
        writeFloat(addrY,YValue)
    end
    if (isKeyPressed(numP6)) then
        YValue = YValue - XYstep
        writeFloat(addrY,YValue)
    end
    if (isKeyPressed(VK_NUMPAD7)) then
        --print(string.format("%x",addrZ))
        ZValue = ZValue + Zstep
        writeFloat(addrZ,ZValue)
    end
    if (isKeyPressed(VK_NUMPAD9)) then
        ZValue = ZValue - Zstep
        writeFloat(addrZ,ZValue)
    end
    -- End "hovering around" activity...
    if (isKeyPressed(VK_F10)) then
        --print(string.format("%x",addrZ))
        -- stay/drop at current location coordinates...
        DisableEntry()
        tmer.destroy()
    end
    if (isKeyPressed(VK_F12)) then
        -- restore start location coordinates...
        -- if not returning to originals, set dropheight higher...
        -- when using FreeCam, always F10... (F12 will crash)
        local flagFreeRoam = readBytes(getAddress("bFreeRoam"),1)
        if (flagFreeRoam == 1) then
            RestoreOrigCoord(addrX,addrY,addrZ)
            -- allow game some time to execute before quiting script
            -- allows to return through walls... in most cases
            sleep(500)
        end
        DisableEntry()
        tmer.destroy()
    end
end

-- restore start location coordinates [F12]...
function RestoreOrigCoord(addrX,addrY,addrZ)
    local Zplus = readFloat(getAddress("ZstepdropHeight"))
    local addrOrig = getAddress("OrigCoord")
    local structOffset = readInteger(getAddress("pStructCrdOffset"))
    local addrCoord = readPointer(getAddress("pStructCrdBase")) + structOffset
        --print(string.format("%x",addrOrig))
        --print(string.format("%x",addrCoord))
        --print(structOffset)
    local Zvalue = readFloat(addrOrig+0x8)+Zplus
    -- update [pStructCrdBase]+xx values...
    writeFloat(addrCoord,readFloat(addrOrig))
    writeFloat(addrCoord+0x4,readFloat(addrOrig+0x4))
    writeFloat(addrCoord+0x8,Zvalue)
    -- update Xval,Yval,Zval values...
    writeFloat(addrX,readFloat(addrOrig))
    writeFloat(addrY,readFloat(addrOrig+0x4))
    writeFloat(addrZ,Zvalue)
end

function ActivateTimer()
    tmer = createTimer(nil, false)
    tmer.OnTimer = Hover
    tmer.Interval = 100
    tmer.Enabled = true
end

function Help()
    local sMessage = [[
 Use following function keys:
 F10 = End at current location
 F12 = End &amp; Restore original location

 Use NumPad keys [2-8] &amp; [4-6] to pass through walls (no clip)
 Use NumPad keys [7-9] to ascend &amp; descend respectively
 (normal move keys can not be used)

 Note: if your character does not "follow" immediately,
            press your Forward key to "kick-start"...

 FreeRoam preferably not used while 'hidden'...

 (see also [Readme] file)  ]]

    showMessage(sMessage)
end

function DisableEntry()
    local addrID = getAddress("AddrListID")
    local ListID = readInteger(addrID)
    local ScriptID = getAddressList().getMemoryRecordByID(ListID)
    ScriptID.Active = false
end

function GetMD5(nShowMsg)
    if process ~= nil then
        local intVal = 0
        -- calculate MD5 of PE header...
        local FileMD5 = md5memory(process,4096)
        local strMsg1,strMsg2
        strMsg1 = "You have attached [" .. process .. "]..."
        strMsg2 = "with following MD5 PE Header value: {" .. FileMD5 .. "}"
        if nShowMsg == 1 then
            showMessage(strMsg1 .. "\n\z" .. strMsg2)
        end
        --print('[',process,']')
        --print(FileMD5)
        --print(intVal)
        return intVal
    end
end


function getStaticAddr(sAOB,nOffset,sBaseAddr,nEval)

  nEval = nEval or 0
  --local scan1 = AOBScan(sAOB,"+X-C-W")
  --print("* " .. scan1[0])
  local scan = createMemScan(false)
  scan.setOnlyOneResult(true)
  scan.firstScan(soExactValue,vtByteArray,rtRounded,sAOB,nil,0,0xffffffffffffffff,"+X-C-W",
                                      fsmNotAligned,nil,true,false,false,false)
  scan.waitTillDone()
  scan.getOnlyResult()

  local addrStruct = scan.Result
  --print(string.format('+ %X +',scan.Result))
  if (nEval == 0 or nEval == 2) then
     local offsVal = scan.Result - nOffset
     --print(string.format('- %X -',offsVal))
     offsVal = string.format('%X',readInteger(offsVal))
     --print(offsVal)
     addrStruct = scan.Result + tonumber(offsVal,16) - nOffset + 4
     --print(string.format('%X',addrStruct))
     if (nEval == 2) then
        addrStruct = readQword(addrStruct)
     end
  end

  scan.destroy()

  local addrFound = getAddress(sBaseAddr)
  writeQword(addrFound,addrStruct)
  --print(string.format('* %X *',addrStruct))
end


-- author: #Sunbeam @Fearless Revolution.
-- (google: "Bypass integrity Unity fearlessRev Sunbeam")
--
function KillAntiDebug()

-- see main script... (aobscanmodules)
-- local addrAntiDebugOffs = getAddress("GameProtect") - getAddress("GameProcess")

--print(string.format('%X',addrAntiDebugOffs))
local addrKillAntiDebug = getAddress("bKillAntiDebug")
local bKillAntiDebug = readBytes(addrKillAntiDebug,1)

if bKillAntiDebug == 9 then return end
local addrAntiDebug = getAddress("GameProtect")

-- create a stringlist class object to hold future thread ids as strings
local tl = createStringlist()

-- fill the stringlist object with the threadlist of the currently opened process
getThreadList( tl )

-- before going into the loop, time for some declarations
-- we will make use of several APIs, hence CE needs to know their addresses; so..
local OpenThread = getAddressSafe( "OpenThread" )
local NtQueryInformationThread = getAddressSafe( "NtQueryInformationThread" )
local TerminateThread = getAddressSafe( "TerminateThread" )
local CloseHandle = getAddressSafe( "CloseHandle" )
-- note that I'm not checking any above in the next part of the code for NULLs
-- I really hope you're doing this after you've opened up ACU.exe in CE

-- do a quick search for "#define THREAD_ALL_ACCESS" on google and you will find what its value is
-- e.g.: https://bbs.pediy.com/thread-89713.htm
local THREAD_ALL_ACCESS = 0x001F03FF
-- we're going to use this with OpenThread

-- do a quick search for "#define ThreadQuerySetWin32StartAddress" on google and you will find what its value is
-- e.g.: https://stackoverflow.com/questions/24728979/ntqueryinformationthread-sometimes-fails-no-error-code
local ThreadQuerySetWin32StartAddress = 0x9
-- we're going to use this with NtQueryInformationThread

-- we'll use this in the loop to store the text-to-number converted thread id
local thread_id
-- we'll use this in the loop to store the handle to the thread
local thread_handle
-- we'll use this in the loop to store our NtQueryInformationThread result, the thread's Entry address
local dwStartAddress = allocateMemory( 0x1000 )
-- we'll use this to check NtQueryInformationThread's result
local nt_status

-- we'll need this in the loop, to check if the thread's Entry address matches the one we know
local module_base = getAddressSafe( process )
-- ACU.exe+275DE50 - E9 E5F11803           - jmp ACU.exe+58ED03A
local func_addr = addrAntiDebug
-- local func_addr = module_base + 0x22F2CB0
-- can/will be different per game EXE...!
-- yes, the above will be most likely different in any other executable; replace it with the one you'd find based on my video tutorial

-- clears Lua Engine window
GetLuaEngine().MenuItem5.doClick()

-- now we want to loop all list items, from first till last and..
for i = 0, tl.Count-1 do
  print(string.format('[%d ~ %d]: ThreadID = %s',i,tl.Count,tl[i]))
  -- ..open each thread with THREAD_ALL_ACCESS parameter
  -- each string in the list needs to be converted to a number before being used
  thread_id = tonumber( tl[i], 16 ) -- no idea if you'd get ids past 0xFFFF; but just in case
  -- ..then we want to obtain a handle to the thread via OpenThread, using the id with THREAD_ALL_ACCESS privileges
  thread_handle = executeCodeEx( 0, nil, OpenThread, THREAD_ALL_ACCESS, 0, thread_id )
  -- according to this post on stackoverflow: https://stackoverflow.com/questions/3528111/how-to-find-the-entry-point-of-a-specific-thread-in-windows
  -- we can get the Entry of a thread using NtQueryInformationThread with ThreadQuerySetWin32StartAddress parameter; so..
  -- the API proto taken from some C++ code is: NTSTATUS ntStatus = NtQueryInformationThread(hThread, ThreadQuerySetWin32StartAddress, &amp;dwStartAddress, sizeof(DWORD), NULL);
  -- we're on x64, so we need QWORD instead of DWORD, meaning 8 bytes instead of 4; so sizeof(QWORD) == 0x8
  -- then we need a dwStartAddress; &amp; indicates this is where the information will be returned by the API, thus a buffer; that's why we allocated it up top
  -- time to run NtQueryInformationThread
  nt_status = executeCodeEx( 0, nil, NtQueryInformationThread, thread_handle, ThreadQuerySetWin32StartAddress, dwStartAddress, 0x8, 0 )
  -- the result should be NT_SUCCESS == 0x0; we want to skip any other statuses
  if nt_status == 0x0 then
    -- now we want to check if the thread Entry address is the one we're looking for, the one we KNOW
    if readQword( dwStartAddress ) == func_addr then
      -- if it's our address, then..
      -- ..terminate the thread based on thread_handle obtained in the loop from thread_id
      local t = executeCodeEx( 0, nil, TerminateThread, thread_handle, 0 )
      -- and close the current open handle before exiting 'for' loop
      executeCodeEx( 0, nil, CloseHandle, thread_handle )

      --showMessage( string.format( "VMProtect Integrity Check thread with id: 0x%X killed.", thread_id ) )
      print(string.format( "\n *** VMProtect Integrity Check thread with id: 0x%X killed. *** \n", thread_id))
      --- ensures routine is run only once...
      writeBytes(addrKillAntiDebug,0x9)
      break
    end
  end
  -- then close the current open handle
  executeCodeEx( 0, nil, CloseHandle, thread_handle )
end
print('\n =&gt; You can close this window now... \n')
-- clean-up the allocation
deAlloc( dwStartAddress )
-- end of KillAntiDebug()
end

</LuaScript>
</CheatTable>
